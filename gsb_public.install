<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function gsb_public_install() {

  $actions = array(
    'migration_prep',
    'siteinfo',
    'time_date',
    'userinfo',
    'roles',
    'users',
    'filter_formats',
    'taxonomy',
    'workbench',
    'pathauto',
    'cron',
    'cache',
    'files',
    'image_styles',
    'themes',
    'media',
    'menu',
    'blocks',
    'breadcrumbs_by_path',
    'fancybox',
    'login_destination',
    'acquia',
    'cmis',
    'ds',
    'menu_position',
    'quickbar',
    'panels',
    'cleanup',  // please leave this as the last task to run
  );

  foreach($actions as $action) {
    _gsb_public_print('Starting ' . $action . ' action');
    $time_start = microtime(true);
    include_once('includes/' . $action . '.install.inc');
    $func = '_gsb_public_setup_' . $action;
    $func();
    $time_end = microtime(true);
    $time = $time_end - $time_start;
    _gsb_public_print('End of ' . $action . ' action. Completed in ' . $time . ' seconds.');
  }
}

function _gsb_public_print($text) {
  if (PHP_SAPI == 'cli') {
    drush_print($text);
  }
}

function _gsb_public_variable_set_multiple($variables) {
  foreach($variables as $variable => $value) {
    variable_set($variable, $value);
  }
}

function _gsb_public_terms_add($terms) {
  foreach($terms as $tid => $term) {
    $fields = array(
      'tid' => $tid,
      'parent' => $term['parent'],
    );
    db_insert('taxonomy_term_hierarchy')
      ->fields($fields)
      ->execute();

    $fields = array(
      'tid' => $tid,
      'vid' => $term['vid'],
      'name' => $term['name'],
      'description' => $term['description'],
      'format' => $term['format'],
      'weight' => $term['weight'],
      'uuid' => $term['uuid'],
    );
    db_insert('taxonomy_term_data')
      ->fields($fields)
      ->execute();
  }
}

/**
 * Get the terms for a given set of term names and a given vocab name
 */
function _gsb_public_get_terms($term_names,$vocab_name) {
  $terms = array();
  foreach ($term_names as $term_name) {
    $term = taxonomy_get_term_by_name($term_name, $vocab_name);
    $term = array_shift($term);
    $terms[] = $term;
  }
  return $terms;
}

/**
 * Update the taxonomies from/to for a list of entities
 */
function _gsb_public_update_entities($entities, $remove_from_term, $from_vocab_name, $from_tid, $to_vocab_name, $to_terms) {

  watchdog('tax_mapping',"in _gsb_public_update_entities",array(),WATCHDOG_NOTICE);
  watchdog('tax_mapping','from tid = ',array($from_tid),WATCHDOG_NOTICE);

  foreach($entities as $entity) {

    $node = node_load($entity->entity_id);
    watchdog('tax_mapping','node id = ',array($node->nid),WATCHDOG_NOTICE);

    $ewrapper = entity_metadata_wrapper('node', $node);

    // update the terms in 'to' vocab
    $set_to_terms = false;
    $field_names = _gsb_public_get_field_name_by_vocab_name($node, $to_vocab_name);
    foreach($field_names as $field_name) {
      _gsb_public_set_field_terms($ewrapper,$field_name,$to_terms);
      $set_to_terms = true;
    }

    // check the $remove_from_term flag to determine if we should try to remove
    // the 'from' term.
    // also, we will remove the 'from' term only if we were able to update the 'to' terms
    // so this means the entity needs to have a field for both the 'from' and the 'to' vocabs

    if ($remove_from_term && $set_to_terms) {
      $field_names = _gsb_public_get_field_name_by_vocab_name($node, $from_vocab_name);
      foreach($field_names as $field_name) {
        _gsb_public_remove_field_term($ewrapper,$field_name,$from_tid);
      }
    }

    if ($set_to_terms) {
      watchdog('tax_mapping','updated node nid = ',array($node->nid),WATCHDOG_NOTICE);
      $ewrapper->save();
    }

    //watchdog('tax_mapping','wrapper = ',_wrapper_debug($ewrapper),WATCHDOG_NOTICE);
  }

}

/**
 * Set the terms for a term reference field
 */
function _gsb_public_set_field_terms($ewrapper,$field_name,$new_terms) {
  $current_terms = array();
  if (!empty($ewrapper->{$field_name})) {
    $current_terms = $ewrapper->{$field_name}->value();
  }
  watchdog('tax_mapping',$field_name.' current_terms = ',$current_terms,WATCHDOG_NOTICE);
  $new_terms = _gsb_public_combine_terms($current_terms, $new_terms);
  watchdog('tax_mapping',$field_name.' new_terms = ',$new_terms,WATCHDOG_NOTICE);
  $ewrapper->{$field_name}->set($new_terms);
}

/**
 * Remove a term from a term reference field
 */
function _gsb_public_remove_field_term($ewrapper,$field_name,$tid) {
  $current_terms = $ewrapper->{$field_name}->value();
  watchdog('tax_mapping',$field_name.' current_terms = ',$current_terms,WATCHDOG_NOTICE);
  $new_terms = _gsb_public_remove_term($tid, $current_terms);
  watchdog('tax_mapping',$field_name.' new_terms = ',$new_terms,WATCHDOG_NOTICE);
  $ewrapper->{$field_name}->set($new_terms);
}

/**
 * Remove a term from a list of terms
 */
function _gsb_public_remove_term($tid, $current_terms) {
  $new_terms = array();
  foreach($current_terms as $term) {
    if ($term->tid != $tid) {
      $new_terms[] = $term;
    }
  }
  return $new_terms;
}

/**
 * Combine a list of terms, with check to see if term is already
 * in the list
 */
function _gsb_public_combine_terms($terms1, $terms2) {
  $new_terms = $terms2;
  foreach($terms1 as $term1) {
    $found = false;
    foreach($terms2 as $term2) {
      if ($term2->tid == $term1->tid) {
        $found = true;
        break;
      }
    }
    if (!$found) {
      $new_terms[] = $term1;
    }
  }
  return $new_terms;
}

/**
 * Get a list of field names that reference a vocab within a node
 */
function _gsb_public_get_field_name_by_vocab_name($node, $vocab_name) {
  //watchdog('tax_mapping','in _gsb_public_get_field_name_by_vocab_name',array(),WATCHDOG_NOTICE);
  //watchdog('tax_mapping','node = ',$node,WATCHDOG_NOTICE);
  $map = field_info_field_map();
  $field_vocabs = array();
  foreach (field_info_fields() as $field_name => $field_info) {
    // Only process taxonomy term reference fields.
    if ($field_info['type'] == 'taxonomy_term_reference') {
      // Loop through the allowed values to find the vocabularies used by the field.
      foreach ($field_info['settings']['allowed_values'] as $allowed_value) {
        // Restrict to fields used by this content type and matching the specified vocabulary.
        if ($allowed_value['vocabulary'] == $vocab_name && in_array($node->type, $map[$field_name]['bundles']['node'])) {
          $field_vocabs[$field_name] = $field_name;
        }
      }
    }
  }
  return $field_vocabs;
}

/**
 * Delete fields.
 */
function _gsb_public_delete_fields($fields) {
  foreach ($fields as $field_name) {
    if ($info = field_info_field($field_name)) {
      foreach ($info['bundles'] as $entity_type => $bundles) {
        foreach ($bundles as $bundle) {
          if ($instance = field_info_instance($entity_type, $field_name, $bundle)) {
            field_delete_instance($instance);
          }
        }
      }
    }

    field_delete_field($field_name);
  }
}

/**
 * Add a 'year' date format.
 */
function gsb_public_update_7000() {
  // Insert custom format: 2011
  db_insert('date_formats')
    ->fields(array('format' => 'Y', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2011
  db_insert('date_format_type')
    ->fields(array('type' => 'year', 'title' => 'Year', 'locked' => 0))
    ->execute();
  // Date Year Format
  variable_set('date_format_year', 'Y');
}

/**
 * Add a video image format.
 */
function gsb_public_update_7001() {
  // Declare our image styles
  $image_styles = array(
    '270x158_video' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '270',
          'height' => '158',
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 2,
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Add a 'time_only' date format.
 */
function gsb_public_update_7002() {
  // Insert custom format: 2:45pm
  db_insert('date_formats')
    ->fields(array('format' => 'g:ia', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2:45pm
  db_insert('date_format_type')
    ->fields(array('type' => 'time_only', 'title' => 'Time only', 'locked' => 0))
    ->execute();
  // Date Time only Format
  variable_set('date_format_time_only', 'g:ia');
}

/**
 * Add a 'dayname_no_year' date format.
 */
function gsb_public_update_7003() {
  // Insert custom format: 2:45pm
  db_insert('date_formats')
    ->fields(array('format' => 'l, M d', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2:45pm
  db_insert('date_format_type')
    ->fields(array('type' => 'dayname_no_year', 'title' => 'Day name, no year', 'locked' => 0))
    ->execute();
  // Date Time only Format
  variable_set('date_format_dayname_no_year', 'l, M d');
}

/**
 * Add another image style.
 */
function gsb_public_update_7004() {
  // Declare our image styles
  $image_styles = array(
    '566x396' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 566,
          'height' => 396,
        ),
        'weight' => 1,
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Adds image styles
 */
function _gsb_public_install_add_image_style($image_styles) {
  // Loop through the image styles and add them.
  foreach ($image_styles as $name => $effects) {
    $style = image_style_save(array('name' => $name));
    foreach ($effects as $effect) {
      $effect['isid'] = $style['isid'];
      image_effect_save($effect);
    }
  }
}

/**
 * Enable the addthis and computed_field modules.
 */
function gsb_public_update_7005() {
  module_enable(array('addthis', 'computed_field'));
}

/**
 * Add another image style.
 */
function gsb_public_update_7006() {
  // Declare our image styles
  $image_styles = array(
    '145x_variable' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 145,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Add pathauto ignore words
 */
function gsb_public_update_7007() {
  variable_set("pathauto_ignore_words",
    "a, an, as, at, before, but, by, for, from, is, in, into, like, of, off, on, onto, our, per, since, than, the, this, that, to, up, via, with");
}


/**
 * Update the 'event_category' vocabulary
 */
function gsb_public_update_7008() {

  $vocab_found = false;
  $term_found = false;

  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    if ($vocabulary->machine_name == 'event_category') {
      $vocab_found = true;
      break;
    }
  }

  if ($vocab_found) {

    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $key => $term) {
      if ($term->name == 'On-campus Events') {
        $term_found = true;
        break;
      }
    }

    if ($term_found) {
      // Rename term 'On-campus Events'
      // to.         'On-campus'
      $term->name = 'On-campus';
      taxonomy_term_save($term);
    }

    // Add term 'Diverse Communities'

    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => 'Diverse Communities',
    );
    taxonomy_term_save($term);

  }

}

/**
 * Enable diff and breadcrumbs_by_path module.
 */
function gsb_public_update_7009() {
  module_enable(array('diff', 'breadcrumbs_by_path'));

  db_query("UPDATE {system} SET weight = '-6' WHERE name = 'breadcrumbs_by_path'");
}

// Enable breakpoints module.
function gsb_public_update_7010() {
  module_enable(array('breakpoints'));
}

// Enable gsb_tokens module.
function gsb_public_update_7011() {
  module_enable(array('gsb_tokens'));
}

/**
 * Update the gsb_wysiwyg_text format filter
 */
function gsb_public_update_7012() {
  $format = filter_format_load('gsb_wysiwyg_text');
  $filters = filter_list_format($format->format);
  // Build the $format->filters array...
  $format->filters = array();
  foreach($filters as $name => $filter) {
    foreach($filter as $k => $v) {
      $format->filters[$name][$k] = $v;
    }
  }
  $format->filters["wysiwyg"]['settings']["valid_elements"] =
    "a[!href|target<_blank|title|style],\n" .
    "div[style|class|id|align<center?justify?left?right],\n" .
    "p,br,em,i,strong,u,cite,blockquote,hr,ul,ol,li,dl,dt,dd,sup,sub,\n" .
    "table,tbody,thead,th,tr,td,\n" .
    "span[style|id],p[style|class|id],\n" .
    "h1,h2,h3,h4,h5,h6,\n" .
    "object,iframe,area,embed,\n" .
    "address,abbr,caption,pre,code,script,\n" .
    "img[!src|title|alt|style|width|height|class|hspace|vspace|id],\n" .
    "@[style]";
  // Save the panopoly wysiwyg format.
  filter_format_save($format);
}

/**
 * Update the wysiwyg modules
 */
function gsb_public_update_7013() {

  // Disable some wysiwyg modules

  module_disable(array('gsb_panopoly_wyiswyg_override'));
  drupal_uninstall_modules(array('gsb_panopoly_wyiswyg_override'));

  module_disable(array('panopoly_wyiswyg'));
  drupal_uninstall_modules(array('panopoly_wyiswyg'));

  module_disable(array('wysiwyg_filter'));
  drupal_uninstall_modules(array('wysiwyg_filter'));

  // Update the body field

  $num_updated = db_update('field_revision_field_body')
    ->fields(array(
      'field_body_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_body_format', 'panopoly_wysiwyg_text', '=')
    ->execute();

  $num_updated = db_update('field_data_field_body')
    ->fields(array(
      'field_body_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_body_format', 'panopoly_wysiwyg_text', '=')
    ->execute();

}

/**
 * Remove navbar and related modules
 */
function gsb_public_update_7014() {

  // Remove navbar and related modules

  module_disable(array('gsb_admin_enhancements'));
  drupal_uninstall_modules(array('gsb_admin_enhancements'));

  module_disable(array('navbar'));
  drupal_uninstall_modules(array('navbar'));

  // Enable the admin menu modules

  module_enable(array('admin_menu','admin_menu_toolbar'));

}

/**
 * Enable gsb_feature_gsa_search module.
 */
function gsb_public_update_7015() {
  module_enable(array('gsb_feature_gsa_search'));
}

/**
 * Update the gsb_wysiwyg_text format filter allowed html settings
 */
function gsb_public_update_7016() {

  $format = filter_format_load('gsb_wysiwyg_text');
  $filters = filter_list_format($format->format);

  // Build the $format->filters array...
  $format->filters = array();
  foreach($filters as $name => $filter) {
    foreach($filter as $k => $v) {
      $format->filters[$name][$k] = $v;
    }
  }

  $format->filters["filter_html"]['status'] = '1';
  $format->filters["filter_html"]['settings']['allowed_html'] = '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <div> <p> <br> <i> <u> <cite> <hr> <sub> <sup> <table> <tbody> <thead> <th> <tr> <td> <span> <h1> <h2> <h3> <h4> <h5> <h6> <object> <iframe> <area> <embed> <address> <abbr> <caption> <pre> <code> <script> <img>';

  // Save the format.
  filter_format_save($format);

}

/*
 * Add 450x263 and 450x263_video image format.
 */
function gsb_public_update_7017() {
  // Declare our image styles
  $image_styles = array(
    '450x263' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '450',
          'height' => '263',
        ),
      ),
    ),
    '450x263_video' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '450',
          'height' => '263',
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 2,
      ),
    ),
    '600x440' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '600',
          'height' => '440',
        ),
      ),
    ),
  );
  _gsb_public_install_add_image_style($image_styles);
}

/**
 * Enable gsb_feature_diptych_fpp module.
 */
function gsb_public_update_7018() {
  module_enable(array('gsb_feature_diptych_fpp'));
}

/**
 * Enable simplesaml_auth module.
 */
function gsb_public_update_7019() {
  module_enable(array('simplesaml_auth'));
}

/**
 * Enable gsb_feature_academic_calendar_ct module.
 */
function gsb_public_update_7020() {
  module_enable(array('gsb_feature_academic_calendar_ct'));
}

/**
 * Enable gsb_feature_academic_calendar_display module.
 */
function gsb_public_update_7021() {
  module_enable(array('gsb_feature_academic_calendar_display'));
}

/**
 * Enable backup_migrate module.
 */
function gsb_public_update_7022() {
  module_enable(array('backup_migrate'));
}

/**
 * Setting gsb_fpp_customization to follow panopoly_magic, in the module peckin' order.
 */
function gsb_public_update_7023() {

  // Make the weight of gsb_fpp_customization one higher than panopoly_magic.
  $weight = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', 'panopoly_magic', '=')
    ->execute()
    ->fetchField();

  db_update('system')
    ->fields(array('weight' => $weight +1))
    ->condition('name', 'gsb_fpp_customization', '=')
    ->execute();
}

/**
 * Enable phone and webform_phone modules.
 */
function gsb_public_update_7024() {
  module_enable(array('phone', "webform_phone"));
}

/**
 * Enable house ads feature.
 */
function gsb_public_update_7025() {
  module_enable(array('gsb_feature_house_ads_fpp'));
}

/**
 * Add a 'european_date_format' date format.
 */
function gsb_public_update_7026() {
  // Insert custom format: 25 Nov 2011
  db_insert('date_formats')
    ->fields(array('format' => 'd M Y', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: 2011
  db_insert('date_format_type')
    ->fields(array('type' => 'european_date_format', 'title' => 'European date format', 'locked' => 0))
    ->execute();
  // Date Year Format
  variable_set('european_date_format', 'd M Y');
}

/**
 * Insert 'Off-campus' term into 'Event Category' vocab.
 */
function gsb_public_update_7027() {
  $fields = array(
    'tid' => '10582',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10582',
    'vid' => 136,
    'name' => 'Off-campus',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '55e1bbfc-fe67-4f12-994e-d6c57e57c889',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();
}

/**
 * Enable gsb panopoly magic customization module
 */
function gsb_public_update_7028() {
  module_enable(array('gsb_panopoly_magic_customization'));
}

/**
 * Insert 'MS' term into 'Program' vocab.
 */
function gsb_public_update_7029() {
  $fields = array(
    'tid' => '10887',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10887',
    'vid' => 151,
    'name' => 'MS',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '73271ac4-f333-400f-a25d-96ea10e5337d',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();
}

/*
 * Set the 'allowed layouts' for the page content type
 */
function gsb_public_update_7030() {

  // Set the 'allowed layouts' for the page content type

  $value = 'O:22:"panels_allowed_layouts":4:{s:9:"allow_new";b:1;s:11:"module_name";s:19:"panelizer_node:page";s:23:"allowed_layout_settings";a:47:{s:8:"flexible";b:1;s:14:"twocol_stacked";b:1;s:13:"twocol_bricks";b:1;s:6:"twocol";b:1;s:25:"threecol_33_34_33_stacked";b:1;s:17:"threecol_33_34_33";b:1;s:25:"threecol_25_50_25_stacked";b:1;s:17:"threecol_25_50_25";b:1;s:6:"onecol";b:1;s:6:"whelan";b:1;s:12:"webb_flipped";b:1;s:4:"webb";b:1;s:14:"taylor_flipped";b:1;s:6:"taylor";b:1;s:12:"sutro_double";b:1;s:5:"sutro";b:1;s:13:"selby_flipped";b:1;s:5:"selby";b:1;s:17:"sanderson_flipped";b:1;s:9:"sanderson";b:1;s:5:"rolph";b:1;s:4:"pond";b:1;s:6:"phelan";b:1;s:15:"moscone_flipped";b:1;s:7:"moscone";b:1;s:8:"mccoppin";b:1;s:15:"hewston_flipped";b:1;s:7:"hewston";b:1;s:6:"harris";b:1;s:5:"geary";b:1;s:12:"burr_flipped";b:1;s:4:"burr";b:1;s:22:"bryant_flipped_flipped";b:1;s:6:"bryant";b:1;s:5:"brown";b:1;s:15:"brenham_flipped";b:1;s:7:"brenham";b:1;s:6:"boxton";b:1;s:16:"bartlett_flipped";b:1;s:8:"bartlett";b:1;s:26:"minipanel-two-columns-wide";b:1;s:20:"minipanel-one-column";b:1;s:21:"gsb-standard-page-two";b:1;s:29:"gsb-landing-standard-page-one";b:1;s:18:"gsb-landing-events";b:0;s:14:"gsb-front-page";b:0;s:21:"gsb-business-insights";b:0;}s:10:"form_state";N;}';

  variable_set('panelizer_node:page_allowed_layouts', $value);
  variable_set('panelizer_node:event_allowed_layouts', $value);
  variable_set('panelizer_node:webform_allowed_layouts', $value);

  variable_set('panelizer_node:page_allowed_layouts_default', 0);
  variable_set('panelizer_node:event_allowed_layouts_default', 0);
  variable_set('panelizer_node:webform_allowed_layouts_default', 0);

}

/**
 * Change date formats that contain M.
 */
function gsb_public_update_7031() {
  db_update('date_formats')->fields(array('format' => 'M j, Y - g:ia'))->condition('format', 'M. j, Y - g:ia')->execute();
  db_update('date_formats')->fields(array('format' => 'M j, Y'))->condition('format', 'M. j, Y')->execute();
  variable_set('date_format_medium', 'M j, Y');
  variable_set('date_format_medium_time', 'M j, Y - g:ia');
}

/**
 * Enable pathauto_title_alias module.
 */
function gsb_public_update_7032() {
  module_enable(array('pathauto_title_alias'));
}

/**
 * Enable gsb_fpp_stock_content module.
 */
function gsb_public_update_7033() {
  module_enable(array('gsb_fpp_stock_content'));
}

/**
 * Insert 'View From The Top' term into 'Event Series' vocab.
 */
function gsb_public_update_7034() {
  $fields = array(
    'tid' => '10602',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10602',
    'vid' => 141,
    'name' => 'View From The Top',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '20fd5ebe-bfff-4322-b57d-155fd6743ee0',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();
}

/**
 * Enable gsb_feature_workbench module.
 */
function gsb_public_update_7035() {
  module_enable(array('gsb_feature_workbench'));
}

/**
 * Enable menu_trail_by_path module.
 */
function gsb_public_update_7036() {
  module_enable(array('menu_trail_by_path'));
}

/**
 * Update image styles
 */
function gsb_public_update_7037() {

  // Declare our image styles
  $image_styles = array(
    '170x170' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '170',
          'height' => '170',
        ),
      ),
    ),
    '270x158' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '270',
          'height' => '158',
        ),
      ),
    ),
    '270x158_video' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '270',
          'height' => '158',
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 2,
      ),
    ),
    '450x263' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 450,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_crop',
        'data' => array(
          'width' => 450,
          'height' => 263,
          'anchor' => 'center-top',
        ),
        'weight' => 2,
      ),
    ),
    '450x263_video' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 450,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_crop',
        'data' => array(
          'width' => 450,
          'height' => 263,
          'anchor' => 'center-top',
        ),
        'weight' => 2,
      ),
      array(
        'name' => 'canvasactions_file2canvas',
        'data' => array(
          'xpos' => 'center',
          'ypos' => 'center',
          'alpha' => 100,
          'path' => 'profiles/gsb_public/themes/gsb_theme/images/video_play.png',
        ),
        'weight' => 3,
      ),
    ),
    '600x440' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '600',
          'height' => '440',
        ),
      ),
    ),
    '627x367' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '627',
          'height' => '367',
        ),
      ),
    ),
    '170x100' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '170',
          'height' => '100',
        ),
      ),
    ),
    '44x44' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '44',
          'height' => '44',
        ),
      ),
    ),
    '566x396' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 566,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_crop',
        'data' => array(
          'width' => 566,
          'height' => 396,
          'anchor' => 'center-top',
        ),
        'weight' => 2,
      ),
    ),
    '145x_variable' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 145,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
    ),
    '566x_variable' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 566,
          'height' => '',
        ),
        'weight' => 1,
      ),
    ),
  );

  // Loop through the image styles and add them.
  foreach ($image_styles as $name => $effects) {

    $style = image_style_load($name);

    if (empty($style)) {
      $style = image_style_save(array('name' => $name));
    } else {
      $style_effects = $style['effects'];
      foreach ($style_effects as $style_effect) {
        image_effect_delete($style_effect);
      }
    }

    foreach ($effects as $effect) {
      $effect['isid'] = $style['isid'];
      image_effect_save($effect);
    }

  }

}

/**
 * Update image styles for media's image preview and teaser
 */
function gsb_public_update_7038() {

  // overriding image view modes preview and teaser which are
  // initially setup in media.module

  module_load_include('inc', 'file_entity', 'file_entity.file_api');

  $default_image_styles = array(
    'preview' => '450x263',
    'teaser' => '450x263',
  );

  foreach ($default_image_styles as $view_mode => $image_style) {

    $image_displays = file_displays_load('image', $view_mode);

    $display_name = 'image__' . $view_mode . '__file_image';;

    if (isset($image_displays[$display_name])) {
      $display = $image_displays[$display_name];
      $display->settings['image_style'] = $image_style;
      file_display_save((object) $display);
    }

  }

}


/**
 * Enable gsb_feature_image_styles module.
 */
function gsb_public_update_7039() {
  module_enable(array('gsb_feature_image_styles'));
}

/**
 * Insert new terms into 'Department' vocab.
 */
function gsb_public_update_7040() {
  $terms = array(
    '10203' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Financial Aid Office',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => '1d0ab1b4-e3b6-4b6c-ac65-c72b7cd24c24',
    ),
    '10217' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Schwab Residential Center',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => 'eb97f609-8c1f-42fa-aea0-f44c480733bb',
    ),
  );

  _gsb_public_terms_add($terms);

}

/**
 * Insert new terms into 'Department' vocab.
 */
function gsb_public_update_7041() {
  $terms = array(
    '10205' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Library',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => '55c6cad0-9dc7-4c83-8f69-5d7fce9cd21c',
    ),
    '10207' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Marketing and Communications',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => 'b7ea5692-5461-4098-96d6-63739b1d1faa',
    ),
    '10200' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Behavioral Lab',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => 'b712f5ce-ad21-4195-8452-30a1935c07a5',
    ),
    '10204' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Global Innovation Programs',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => '4069965f-05dd-4c67-ab6e-ebab14d89206',
    ),
    '10199' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Academic Administration',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' =>  '5f971c42-03c1-46b1-9469-93572c213c65',
    ),
    '10218' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Stanford MSx Program',
      'description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => '9448bf0f-8e6b-40f1-aad5-5ad10f45c9ae',
    ),
    '10202' => array(
      'parent' => 0,
      'vid' => 126,
      'name' => 'Faculty Support','description' => NULL,
      'format' => NULL,
      'weight' => 0,
      'uuid' => 'de4f8306-3995-4b03-8047-5a8dfd6d431c',
    ),
  );

  _gsb_public_terms_add($terms);
}

/**
 * Enable gsb_panels_ipe_overrides module.
 */
function gsb_public_update_7042() {
  module_enable(array('gsb_panels_ipe_overrides'));
}

/**
 * Alpha sort the programs.
 */
function gsb_public_update_7043() {

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 0))
    ->condition('vid', '151', '=')
    ->condition('name', 'Executive Education', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 1))
    ->condition('vid', '151', '=')
    ->condition('name', 'MBA', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 2))
    ->condition('vid', '151', '=')
    ->condition('name', 'MS', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 3))
    ->condition('vid', '151', '=')
    ->condition('name', 'MSx', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 4))
    ->condition('vid', '151', '=')
    ->condition('name', 'PhD', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 5))
    ->condition('vid', '151', '=')
    ->condition('name', 'SEED Program', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 6))
    ->condition('vid', '151', '=')
    ->condition('name', 'SIGM', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 7))
    ->condition('vid', '151', '=')
    ->condition('name', 'Social Innovation Program', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 8))
    ->condition('vid', '151', '=')
    ->condition('name', 'Stanford Ignite', '=')
    ->execute();

}

/**
 * Delete the older program field that was replaced.
 */
function gsb_public_update_7044() {

  $instance = field_info_instance('node', 'field_program_single', 'academic_calendar_event');

  // Mark field for deletion.
  field_delete_instance($instance);

  // Remove field marked for deletion.
  field_purge_batch(10);

}

/**
 * Update WITL paths and aliases.
 */
function gsb_public_update_7045() {
  // Change WITL link in navigation.
  $link = menu_link_load(15466);
  $link['link_path'] = 'programs/mba/student-life/week-in-the-life';
  menu_link_save($link);

  $old_path = 'programs/mba/student-life/gsb-unofficial/week-in-the-life/';
  $new_path = 'programs/mba/student-life/week-in-the-life/';
  $match = '%' . $old_path . '%';
  $select = db_select('url_alias');
  $select->condition('alias', $match, 'LIKE');
  $results = $select->fields('url_alias')->execute();
  foreach ($results as $path) {
    // Replace old path with new path.
    $path->alias = str_replace($old_path, $new_path, $path->alias);
    $path = (array) $path;
    path_save($path);
  }
}

/**
 * Remove menu minipanels from Our Programs submenu.
 */
function gsb_public_update_7046() {
  // mlid of Our programs link.
  $plid = '16511';

  $query = db_select('menu_links', 'ml');
  $query->fields('ml');
  $query->condition('ml.plid', $plid);
  $results = $query->execute();

  foreach ($results as $item) {
    $link = menu_link_load($item->mlid);
    // Get rid of menu minipanels options.
    $link['options']['minipanel'] = '';
    unset($link['options']['menu_minipanels_hover']);
    menu_link_save($link);
  }
}

/**
 * Enable gsb_addthis_customization module.
 */
function gsb_public_update_7047() {
  module_enable(array('gsb_addthis_customization'));
}

/**
 * Delete Academic Calendar from Event Category vocabulary.
 */
function gsb_public_update_7048() {
  taxonomy_term_delete('10556');
}

/**
 * Usage and Alpha (hybrid) sort the programs.
 */
function gsb_public_update_7049() {

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 0))
    ->condition('vid', '151', '=')
    ->condition('name', 'MBA', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 1))
    ->condition('vid', '151', '=')
    ->condition('name', 'MS', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 2))
    ->condition('vid', '151', '=')
    ->condition('name', 'MSx', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 3))
    ->condition('vid', '151', '=')
    ->condition('name', 'PhD', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 4))
    ->condition('vid', '151', '=')
    ->condition('name', 'Executive Education', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 5))
    ->condition('vid', '151', '=')
    ->condition('name', 'SEED Program', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 6))
    ->condition('vid', '151', '=')
    ->condition('name', 'SIGM', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 7))
    ->condition('vid', '151', '=')
    ->condition('name', 'Social Innovation Program', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 8))
    ->condition('vid', '151', '=')
    ->condition('name', 'Stanford Ignite', '=')
    ->execute();

}

/**
 * Usage and Alpha (hybrid) sort the department.
 */
function gsb_public_update_7050() {

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 0))
    ->condition('vid', '126', '=')
    ->condition('name', 'MBA Admissions', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 1))
    ->condition('vid', '126', '=')
    ->condition('name', 'MSx Admissions', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 2))
    ->condition('vid', '126', '=')
    ->condition('name', 'PhD Admissions', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 3))
    ->condition('vid', '126', '=')
    ->condition('name', 'Executive Education Admissions', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 4))
    ->condition('vid', '126', '=')
    ->condition('name', 'Academic Administration', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 5))
    ->condition('vid', '126', '=')
    ->condition('name', 'Behavioral Lab', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 6))
    ->condition('vid', '126', '=')
    ->condition('name', 'Faculty Support', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 7))
    ->condition('vid', '126', '=')
    ->condition('name', 'Financial Aid Office', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 8))
    ->condition('vid', '126', '=')
    ->condition('name', 'Global Innovation Programs', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 9))
    ->condition('vid', '126', '=')
    ->condition('name', 'Library', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 10))
    ->condition('vid', '126', '=')
    ->condition('name', 'Marketing and Communications', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 11))
    ->condition('vid', '126', '=')
    ->condition('name', 'Schwab Residential Center', '=')
    ->execute();

  db_update('taxonomy_term_data')
    ->fields(array('weight' => 12))
    ->condition('vid', '126', '=')
    ->condition('name', 'Stanford MSx Program', '=')
    ->execute();

}

/**
 * Enable the google_analytics and gsb_feature_google_analytics_settings modules.
 */
function gsb_public_update_7051() {
  module_enable(array('google_analytics', 'gsb_feature_google_analytics_settings'));
}

/**
 * Enable gsb_addthis_customization module.
 */
function gsb_public_update_7052() {
  module_enable(array('gsb_addthis_customization'));
}

/**
 * Enable the login destination module.
 */
function gsb_public_update_7053() {
  module_enable(array('login_destination'));

  $current_roles = user_roles();
  $roles_to_use = array('administrator', 'section editor', 'section manager', 'fa', 'aa', 'cwo_admin');
  $roles = array_intersect($current_roles, $roles_to_use);

  $rids = array();
  foreach($roles as $rid => $role) {
    $rids[$rid] = (string) $rid;
  }

  $record = array(
    'triggers' => serialize(array('login' => 'login')),
    'roles' => serialize($rids),
    'pages_type' => 0,
    'pages' => '',
    'destination_type' => 0,
    'destination' => 'admin/workbench',
    'weight' => 0,
  );

  db_insert('login_destination')->fields($record)->execute();
}

/**
 * Enable the heirarchichal select menu module.
 */
function gsb_public_update_7054() {
  module_enable(array('hs_menu'));
}

/**
 * Enable gsb_advanced_menu_customization module.
 */
function gsb_public_update_7055() {
  module_enable(array('gsb_advanced_menu_customization'));
}

/**
 * Insert 'Academic Calendar' term into 'Event Category' vocab.
 */
function gsb_public_update_7056() {

  // (10556, 136, 'Academic Calendar', NULL, NULL, 0, 'cb3a4832-13bc-412b-8cc1-a106e373b660'),

  $fields = array(
    'tid' => '10556',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10556',
    'vid' => 136,
    'name' => 'Academic Calendar',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => 'cb3a4832-13bc-412b-8cc1-a106e373b660',
  );

  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();

}

/**
 * Enable the pathauto_menu_link module
 */
function gsb_public_update_7057() {
  module_enable(array('pathauto_menu_link'));
}

/**
 * Enable gsb_feature_simplesaml module.
 */
function gsb_public_update_7058() {
  module_enable(array('gsb_feature_simplesaml'));
}

/**
 * Enable gsb_acquia_tokens module.
 */
function gsb_public_update_7059() {
  if (!module_exists('gsb_acquia_tokens')) {
    module_enable(array('gsb_acquia_tokens'));
  }
}

/**
 * Enable CacheExclude module.
 */
function gsb_public_update_7060() {
  if (!module_exists('cacheexclude')) {
    module_enable(array('cacheexclude'));
  }
}

/**
 * Enable Site Verify module.
 */
function gsb_public_update_7061() {
  if (!module_exists('site_verify')) {
    module_enable(array('site_verify'));
  }
}

/**
 * Enable Menu Attributes
 */
function gsb_public_update_7062() {
  if (!module_exists('menu_attributes')) {
    module_enable(array('menu_attributes'));
  }
}

/**
 * Disable Unneeded modules
 */
function gsb_public_update_7063() {
  $modules = array('panopoly_admin', 'panopoly_core', 'panopoly_theme', 'apps');
  module_disable($modules, 'FALSE');
  drupal_uninstall_modules($modules, 'FALSE');
}

/**
 * Insert 'Metals & Mining' term into 'Industry' vocab.
 */
function gsb_public_update_7064() {
  $fields = array(
    'tid' => '10743',
    'parent' => 0,
  );
  db_insert('taxonomy_term_hierarchy')
    ->fields($fields)
    ->execute();

  $fields = array(
    'tid' => '10743',
    'vid' => 146,
    'name' => 'Metals & Mining',
    'description' => NULL,
    'format' => NULL,
    'weight' => 0,
    'uuid' => '239dfac9-4072-4186-93af-7c7ca565e404',
  );
  db_insert('taxonomy_term_data')
    ->fields($fields)
    ->execute();
}

/**
 * Insert SIGM and Ignite into departments
 */
function gsb_public_update_7065() {
  $query = db_insert('taxonomy_term_hierarchy')->fields(array('tid', 'parent'));
  $query->values(array('tid' => '10219', 'parent' => 0));
  $query->values(array('tid' => '10220', 'parent' => 0));
  $query->execute();

  $query = db_insert('taxonomy_term_data')->fields(array('tid', 'vid', 'name', 'description', 'format', 'weight', 'uuid'));
  $query->values(array(
    'tid' => '10219',
    'vid' => 126,
    'name' => 'Ignite Admissions',
    'description' => NULL,
    'format' => NULL,
    'weight' => 4,
    'uuid' => 'be12f903-a926-46d2-9208-fca66f1b8414',
  ));
  $query->values(array(
    'tid' => '10220',
    'vid' => 126,
    'name' => 'SIGM Admissions',
    'description' => NULL,
    'format' => NULL,
    'weight' => 5,
    'uuid' => '1123ec56-425a-4395-bd6c-2d2e0526a756',
  ));

  $query->execute();
}

/**
 * Enable PhD Candidates module
 */
function gsb_public_update_7066() {
  if (!module_exists('gsb_feature_phd_candidate_ct')) {
    module_enable(array('gsb_feature_phd_candidate_ct'));
  }
}

/**
 * Enable PHD Candidates Display Module.
 */
function gsb_public_update_7067() {
  if (!module_exists('gsb_feature_phd_candidate_display')) {
    module_enable(array('gsb_feature_phd_candidate_display'));
  }
  if (!module_exists('views_field_view')) {
    module_enable(array('views_field_view'));
  }
}

/**
 * Update authenticated user permissions for edit own phd candidate
 */
function gsb_public_update_7068() {
  // Get the authenticated user role
  $authenticated_user = user_role_load_by_name('authenticated user');

  $authenticated_user_permissions = array(
    // edit own permission for phd candidate content type
    'edit own phd_candidate content',
    'view the administration theme',
  );

  // Update authenticated user role permissions
  user_role_grant_permissions($authenticated_user->rid, $authenticated_user_permissions);
}

/**
 * Enable new two digit date format.
 */
function gsb_public_update_7069() {
  // Insert custom format: 11
  db_insert('date_formats')
    ->fields(array('format' => 'y', 'type' => 'custom', 'locked' => 0))
    ->execute();

  // Insert custom format: 11
  db_insert('date_format_type')
    ->fields(array('type' => 'two_digit_year', 'title' => 'Two digit year format', 'locked' => 0))
    ->execute();

  // Date Two Digit Year Format
  variable_set('date_format_two_digit_year', 'y');
}

/**
 * Enable gsb_custom_section_title module.
 */
function gsb_public_update_7070() {
  if (!module_exists('gsb_custom_section_title')) {
    module_enable(array('gsb_custom_section_title'));
  }
}

/**
 * Enable zurb_responsive_tables.
 */
function gsb_public_update_7072() {
  if (!module_exists('zurb_responsive_tables')) {
    module_enable(array('zurb_responsive_tables'));
  }
}

/**
 * Set variable breadcrumbs_by_path_current_title to 1.
 */
function gsb_public_update_7073() {
  variable_set('breadcrumbs_by_path_current_title', 1);
}

/**
 * Set variable breadcrumbs_by_path variables
 */
function gsb_public_update_7074() {
  variable_set('breadcrumbs_by_path_current_title', 1);
  variable_set('breadcrumbs_by_path_exclude_paths', '<front>');
}

/**
 * Enable gsb_feature_image_fpp.
 */
function gsb_public_update_7075() {
  if (!module_exists('gsb_feature_image_fpp')) {
    module_enable(array('gsb_feature_image_fpp'));
  }
}

/**
 * Enable syslog and disable dblog.
 */
function gsb_public_update_7076() {
  module_disable(array('dblog'));
  module_enable(array('syslog'));
}

/**
 * Enable elysia_cron module
 */
function gsb_public_update_7077() {
  if (!module_exists('elysia_cron')) {
    module_enable(array('elysia_cron'));
  }
}

/**
 * Enable typogrify module.
 */
function gsb_public_update_7078() {
  if (!module_exists('typogrify')) {
    module_enable(array('typogrify'));
  }
}

/**
 * Enable acquia_purge and expire module.
 */
function gsb_public_update_7079() {
  $modules = array();
  if (!module_exists('expire')) {
    $modules[] = 'expire';
  }
  if (!module_exists('acquia_purge')) {
    $modules[] = 'acquia_purge';
  }
  if ($modules) {
    module_enable($modules);
  }
}

/**
 * Enable cmis related modules.
 */
function gsb_public_update_7080() {
  if (!module_exists('cmis')) {
    module_enable(array('cmis'));
  }
  if (!module_exists('cmis_common')) {
    module_enable(array('cmis_common'));
  }
  if (!module_exists('gsb_cmis_api')) {
    module_enable(array('gsb_cmis_api'));
  }
  if (!module_exists('gsb_cmis')) {
    module_enable(array('gsb_cmis'));
  }
}

/**
 * Enable gsb_feature_featured_person_fpp
 */
function gsb_public_update_7081() {
  if (!module_exists('gsb_feature_featured_person_fpp')) {
    module_enable(array('gsb_feature_featured_person_fpp'));
  }
}

/**
 * Enable select_or_other module
 */
function gsb_public_update_7082() {
  if (!module_exists('select_or_other')) {
    module_enable(array('select_or_other'));
  }
}

/**
 * Enable gsb_feature_case_ct and gsb_feature_working_paper_ct modules
 */
function gsb_public_update_7083() {
  if (!module_exists('gsb_feature_case_ct')) {
    module_enable(array('gsb_feature_case_ct'));
  }
  if (!module_exists('gsb_feature_working_paper_ct')) {
    module_enable(array('gsb_feature_working_paper_ct'));
  }
}

/**
 * Enable gsb_feature_case_display module
 */
function gsb_public_update_7084() {
  if (!module_exists('gsb_feature_case_display')) {
    module_enable(array('gsb_feature_case_display'));
  }
}

/**
 * Enable gsb_feature_working_paper_display module
 */
function gsb_public_update_7085() {
  if (!module_exists('gsb_feature_working_paper_display')) {
    module_enable(array('gsb_feature_working_paper_display'));
  }
}

/**
 * Enable gsb_feature_book_ct.
 */
function gsb_public_update_7086() {
  $modules = array();
  if (!module_exists('gsb_feature_book_ct')) {
    $modules[] = 'gsb_feature_book_ct';
  }

  if (!empty($modules)) {
    module_enable($modules);
  }
}

/**
 * Enable gsb_az_filter module
 */
function gsb_public_update_7087() {
  if (!module_exists('gsb_az_filter')) {
    module_enable(array('gsb_az_filter'));
  }
}

/**
 * Add setting for cmis_common to not verify the certificate.
 */
function gsb_public_update_7088() {
  variable_set('cmis_common_no_verify_cert', TRUE);
}

/**
 * Enable gsb_feature_course_ct module
 */
function gsb_public_update_7089() {
  if (!module_exists('gsb_feature_course_ct')) {
    module_enable(array('gsb_feature_course_ct'));
  }
}

/**
 * Enable gsb_feature_book_display module
 */
function gsb_public_update_7090() {
  if (!module_exists('gsb_feature_book_display')) {
    module_enable(array('gsb_feature_book_display'));
  }
}

/**
 * Enable gsb_courses_display module.
 */
function gsb_public_update_7091() {
  if (!module_exists('gsb_feature_course_display')) {
    module_enable(array('gsb_feature_course_display'));
  }
}

/**
 * Enable gsb_feature_publication_ct module.
 */
function gsb_public_update_7092() {
  if (!module_exists('gsb_feature_publication_ct')) {
    module_enable(array('gsb_feature_publication_ct'));
  }
}

/**
 * Update the 'centers_research_programs' vocabulary
 */
function gsb_public_update_7093() {

  $vocab_found = false;

  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    if ($vocabulary->machine_name == 'centers_research_programs') {
      $vocab_found = true;
      break;
    }
  }

  if ($vocab_found) {

    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $key => $term) {
      if ($term->name == 'CSI') {
        $term->name = 'Center for Social Innovation';
        taxonomy_term_save($term);
      }
      else if ($term->name == 'CES') {
        $term->name = 'Center for Entrepreneurial Studies';
        taxonomy_term_save($term);
      }
      else if ($term->name == 'CGBE') {
        $term->name = 'Center for Global Business and the Economy';
        taxonomy_term_save($term);
      }
      else if ($term->name == 'CLDR') {
        $term->name = 'Center for Leadership Development and Research';
        taxonomy_term_save($term);
      }
      else if ($term->name == 'SC Forum') {
        $term->name = 'Global Supply Chain Management Forum';
        taxonomy_term_save($term);
      }
      else if ($term->name == 'SEED') {
        $term->name = 'Stanford Institute for Innovation in Developing Economies';
        taxonomy_term_save($term);
      }
      else if ($term->name == 'STEYER-TAYLOR') {
        $term->name = 'Steyer-Taylor Center for Energy Policy and Finance';
        taxonomy_term_save($term);
      }
      else if ($term->name == 'PHI') {
        taxonomy_term_delete($term->tid);
      }
      else if ($term->name == 'SPRIE') {
        taxonomy_term_delete($term->tid);
      }

    }
  }

}

/**
 * Enable gsb_feature_publication_display module.
 */
function gsb_public_update_7094() {
  if (!module_exists('gsb_feature_publication_display')) {
    module_enable(array('gsb_feature_publication_display'));
  }
}

/**
 * Enable gsb_feature_business_website_ct and display modules
 */
function gsb_public_update_7095() {
  if (!module_exists('gsb_feature_business_website_ct')) {
    module_enable(array('gsb_feature_business_website_ct'));
  }
  if (!module_exists('gsb_feature_business_website_display')) {
    module_enable(array('gsb_feature_business_website_display'));
  }
}

/**
 * Enable gsb_feature_rss_feeds.
 */
function gsb_public_update_7096() {
  if (!module_exists('gsb_feature_rss_feeds')) {
    module_enable(array('gsb_feature_rss_feeds'));
  }
}

/**
 * Update the book field_year_of_publication_value value to save only Y format
 */
function gsb_public_update_7097() {

  $query = db_select('field_data_field_year_of_publication','year_pub');
  $query->fields('year_pub', array(
    'entity_type','bundle','deleted','entity_id','revision_id','language','delta',
    'field_year_of_publication_value'
  ));
  $query->condition('year_pub.bundle','book','=');
  $result = $query->execute();

  foreach ($result as $item) {
    $timestamp = strtotime($item->field_year_of_publication_value);
    $date_time = date_create('@' . $timestamp);
    $date = date_format($date_time, 'Y') . '-01-01 00:00:00';
    db_update('field_data_field_year_of_publication')
      ->fields(array('field_year_of_publication_value' => $date))
      ->condition('entity_id', $item->entity_id, '=')
      ->execute();
  }
}

/**
 * Enable gsb_agenda.
 */
function gsb_public_update_7098() {
  if (!module_exists('gsb_agenda')) {
    module_enable(array('gsb_agenda'));
  }
}

/**
 * Create Business Website Categories vocabulary.
 */
function gsb_public_update_7099() {
  $vocabulary = (object) array(
    'machine_name' => 'business_website_categories',
    'name' => 'Business Website Categories',
    'description' => '',
  );
  taxonomy_vocabulary_save($vocabulary);
}

/**
 * Setting gsb_feature_publication_display to follow panopoly_magic, in the module peckin' order.
 */
function gsb_public_update_7100() {
  // Make the weight of our module one higher than panopoly_magic.
  $weight = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', 'panopoly_magic', '=')
    ->execute()
    ->fetchField();

  db_update('system')
    ->fields(array('weight' => $weight +1))
    ->condition('name', 'gsb_feature_publication_display', '=')
    ->execute();
}

/**
 * Enable smart_trim
 */
function gsb_public_update_7101() {
  if (!module_exists('smart_trim')) {
    module_enable(array('smart_trim'));
  }
}

/**
 * Change jpeg quality to 100%
 */
function gsb_public_update_7102() {
  variable_set('image_jpeg_quality', 100);
}

/**
 * Enable menu_position
 */
function gsb_public_update_7103() {
  if (!module_exists('menu_position')) {
    module_enable(array('menu_position'));
  }

  variable_set('menu_position_active_link_display', 'parent');
}

/**
 * Enable gsb_connecting_link.
 */
function gsb_public_update_7104() {
  if (!module_exists('gsb_connecting_link')) {
    module_enable(array('gsb_connecting_link'));
  }
}

/**
 * Update the 'business_insight_topic' vocabulary
 */
function gsb_public_update_7105() {
  $vocab_found = false;
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    if ($vocabulary->machine_name == 'business_insight_topic') {
      $vocab_found = true;
      break;
    }
  }
  if ($vocab_found) {
    // add any new terms
    $new_terms = array(
      "Career & Success",
      "Corporate Governance",
      "Education",
      "Energy",
      "Entrepreneurship",
      "Global Business",
      "Health Care",
      "Leadership",
      "Nonprofit",
      "Public Sector",
    );
    $terms = taxonomy_get_tree($vid);
    foreach ($new_terms as $new_term) {
      $term_found = false;
      foreach ($terms as $key => $term) {
        if ($term->name == $new_term) {
          $term_found = true;
          break;
        }
      }
      if (!$term_found) {
        $term = (object) array(
          'vid' => $vocabulary->vid,
          'name' => $new_term,
        );
        taxonomy_term_save($term);
      }
    }
    // rename terms
    $rename_terms = array(
      "Business & Society" => "Social Innovation",
      "Media & Entertainment" => "Management",
    );
    foreach ($rename_terms as $old => $new) {
      foreach ($terms as $key => $term) {
        if ($term->name == $old) {
          $term->name = $new;
          taxonomy_term_save($term);
          break;
        }
      }
    }
  }
  cache_clear_all();
}

/**
 * Update the 'business_insight_topic' vocabulary
 */
function gsb_public_update_7106() {

  // the mapping array has the following structure:
  //    from vocab term name
  //    remove from term - true deletes the from term
  //    from vocab name
  //    from field name
  //    to vocab name
  //    to term names

  $mapping = array(
    array(
      'from_term_name' => 'Consumer',
      'remove_from_term' => true,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'academic_area',
      'to_term_names' => array("Marketing"),
    ),
    array(
      'from_term_name' => 'Technology',
      'remove_from_term' => true,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'academic_area',
      'to_term_names' => array("Operations, Information & Technology"),
    ),
    array(
      'from_term_name' => 'Operations',
      'remove_from_term' => true,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'academic_area',
      'to_term_names' => array("Operations, Information & Technology"),
    ),
    array(
      'from_term_name' => 'Transportation',
      'remove_from_term' => true,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'business_insight_topic',
      'to_term_names' => array("Management"),
    ),
    array(
      'from_term_name' => 'Finance & Economics',
      'remove_from_term' => true,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'academic_area',
      'to_term_names' => array("Accounting","Economics","Finance","Political Economy"),
    ),
    /* no nodes found needing this update
    array(
      'from_term_name' => 'Marketing',
      'remove_from_term' => false,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'academic_area',
      'to_term_names' => array("Marketing"),
     ),
    */
    /* no nodes found needing this update
    array(
      'from_term_name' => 'Marketing',
      'remove_from_term' => true,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'business_insight_topic',
      'to_term_names' => array("Career & Success"),
     ),
     */
    array(
      'from_term_name' => 'Management & Organizations',
      'remove_from_term' => false,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'business_insight_topic',
      'to_term_names' => array("Career & Success","Corporate Governance","Management"),
    ),
    array(
      'from_term_name' => 'Management & Organizations',
      'remove_from_term' => true,
      'from_vocab_name' => 'business_insight_topic',
      'from_field_name' => 'field_business_insight_topic',
      'to_vocab_name' => 'academic_area',
      'to_term_names' => array("Organizational Behavior"),
    ),
  );

  foreach ($mapping as $mapping_info) {

    // get the mapping info

    $from_term_name =  $mapping_info['from_term_name'];
    $remove_from_term = $mapping_info['remove_from_term'];
    $from_vocab_name = $mapping_info['from_vocab_name'];
    $from_field_name = $mapping_info['from_field_name'];
    $to_vocab_name = $mapping_info['to_vocab_name'];
    $to_term_names = $mapping_info['to_term_names'];
    watchdog('tax_mapping','remove_from_term = ',array($remove_from_term),WATCHDOG_NOTICE);
    watchdog('tax_mapping','from_vocab_name = ',array($from_vocab_name),WATCHDOG_NOTICE);
    watchdog('tax_mapping','from_term_name = ',array($from_term_name),WATCHDOG_NOTICE);
    watchdog('tax_mapping','from_field_name = ',array($from_field_name),WATCHDOG_NOTICE);
    watchdog('tax_mapping','to_vocab_name = ',array($to_vocab_name),WATCHDOG_NOTICE);
    watchdog('tax_mapping','to_term_names = ',$to_term_names,WATCHDOG_NOTICE);

    // get the 'from' term

    $from_term = taxonomy_get_term_by_name($from_term_name, $from_vocab_name);
    $from_term = array_shift($from_term);

    // get all entities with the given 'from' term

    $query = db_select("field_data_$from_field_name", 'from_stuff')
      ->fields('from_stuff')
      ->condition($from_field_name.'_tid', $from_term->tid)
      ->execute();
    $entities = $query->fetchAll();

    // get all the 'to' terms

    $to_terms = _gsb_public_get_terms($to_term_names,$to_vocab_name);

    // update all the entities

    _gsb_public_update_entities($entities, $remove_from_term, $from_vocab_name, $from_term->tid, $to_vocab_name, $to_terms);
  }
}

/**
 * Delete terms no longer in use in the 'business_insight_topic' vocabulary
 */
function gsb_public_update_7107() {

  // Consumer tid = 10041
  // Finance & Economics tid = 10061
  // Management & Organizations tid = 10081
  // Marketing tid = 10086
  // Operations tid = 10101
  // Technology tid = 10111
  // Transportation tid = 10116

  taxonomy_term_delete('10041');
  taxonomy_term_delete('10061');
  taxonomy_term_delete('10081');
  taxonomy_term_delete('10086');
  taxonomy_term_delete('10101');
  taxonomy_term_delete('10111');
  taxonomy_term_delete('10116');

}

/**
 * Update all existing publications
 */
function gsb_public_update_7108() {
  _gsb_feature_publication_ct_update_academic_area();
}

/**
 * Enable gsb_node_modal.
 */
function gsb_public_update_7109() {
  if (!module_exists('gsb_node_modal')) {
    module_enable(array('gsb_node_modal'));
  }
}

/**
 * Swap login_destination for gsb_login_destination.
 */
function gsb_public_update_7110() {
  if (!module_exists('gsb_login_destination')) {
    module_enable(array('gsb_login_destination'));
  }
  if (module_exists('login_destination')) {
    module_disable(array('login_destination'));
  }
}

/**
 * Add Faculty role.
 */
function gsb_public_update_7111() {
  // Create the Faculty role
  $faculty = new stdClass();
  $faculty->name = 'Faculty';
  $faculty->weight = 7;
  user_role_save($faculty);
}

/**
 * Add gsb_workbench_save_and_publish
 */
function gsb_public_update_7112() {
  if (!module_exists('gsb_workbench_save_and_publish')) {
    module_enable(array('gsb_workbench_save_and_publish'));
  }
}

/**
 * Add gsb_field_authors
 */
function gsb_public_update_7113() {
  if (!module_exists('gsb_field_authors')) {
    module_enable(array('gsb_field_authors'));
  }
}

/**
 * Add gsb_faculty_role
 */
function gsb_public_update_7114() {
  if (!module_exists('gsb_faculty_role')) {
    module_enable(array('gsb_faculty_role'));
  }
}

/**
 * Add menu_token
 */
function gsb_public_update_7115() {
  if (!module_exists('menu_token')) {
    module_enable(array('menu_token'));
  }
}

/**
 * Add gsb_feature_media_item_ct
 */
function gsb_public_update_7116() {
  if (!module_exists('gsb_feature_media_item_ct')) {
    module_enable(array('gsb_feature_media_item_ct'));
  }
}

/**
 * Add gsb_feature_media_item_display
 */
function gsb_public_update_7117() {
  if (!module_exists('gsb_feature_media_item_display')) {
    module_enable(array('gsb_feature_media_item_display'));
  }
}

/**
 * Add submit_field
 */
function gsb_public_update_7118() {
  if (!module_exists('submit_field')) {
    module_enable(array('submit_field'));
  }
}

/**
 * Create Research Databases vocabulary.
 */
function gsb_public_update_7119() {
  $vocabulary = (object) array(
    'machine_name' => 'research_databases',
    'name' => 'Research Databases',
    'description' => '',
  );
  taxonomy_vocabulary_save($vocabulary);
}

/**
 * Update the 'research_databases' vocabulary
 */
function gsb_public_update_7120() {
  $vocab_found = false;
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    if ($vocabulary->machine_name == 'research_databases') {
      $vocab_found = true;
      break;
    }
  }
  if ($vocab_found) {
    // Add term 'SSRN'
    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => 'SSRN',
    );
    taxonomy_term_save($term);
    // Add term 'Unknown'
    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => 'Unknown',
    );
    taxonomy_term_save($term);
  }
}

/**
 * Delete some field instances from Workin' Paper CT
 */
function gsb_public_update_7121() {
  $field_names = array(
    'field_permissions_statement',
    'field_page_count',
    'field_link_single',
    'field_learning_objective',
    'field_citation',
    'field_year',
    'field_link_document',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'working_paper');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Add custom_add_another and markup modules.
 */
function gsb_public_update_7122() {
  if (!module_exists('custom_add_another')) {
    module_enable(array('custom_add_another'));
  }

  if (!module_exists('markup')) {
    module_enable(array('markup'));
  }
}

/**
 * Remove field_teaching_material_name.
 */
function gsb_public_update_7123() {
  _gsb_public_delete_fields(array('field_teaching_material_name'));
}

/**
 * Remove podcast and video fields.
 */
function gsb_public_update_7124() {
  _gsb_public_delete_fields(array('field_link_video_unlimited', 'field_link_podcast_unlimited'));
}

/**
 * Remove field_position_year and field_center_affiliations.
 */
function gsb_public_update_7125() {
  _gsb_public_delete_fields(array('field_position_year', 'field_center_affiliations'));
}

/**
 * Delete some field instances from Workin' Paper, Book, Publication and Media Item CT
 */
function gsb_public_update_7126() {
  $field_names = array(
    'field_date',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'working_paper');
    field_delete_instance($instance);
  }

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'book');
    field_delete_instance($instance);
  }

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'media_item');
    field_delete_instance($instance);
  }

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'publication');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_pub_date_month field instance from Workin' Paper and Publication CT
 */
function gsb_public_update_7127() {
  $field_names = array(
    'field_pub_date_month',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'working_paper');
    field_delete_instance($instance);
  }
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'publication');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_title field instance from field_working_papers field collection.
 */
function gsb_public_update_7128() {
  $field_names = array(
    'field_title',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_working_papers');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete old fields.
 */
function gsb_public_update_7129() {
  $instances = array('field_link_unlimited');

  foreach ($instances as $field_name) {
    $instance = field_info_instance('node', $field_name, 'faculty');
    field_delete_instance($instance);
  }
  field_purge_batch(10);

  $instances = array('field_year');

  foreach ($instances as $field_name) {
    $instance = field_info_instance('node', $field_name, 'working_paper');
    field_delete_instance($instance);
  }
  field_purge_batch(10);

  $fields = array('field_greater_univ_aff_unlimited');
  _gsb_public_delete_fields($fields);
}

/**
 * Delete field_organization.
 */
function gsb_public_update_7130() {
  _gsb_public_delete_fields(array('field_organization'));
}

/**
 * Create new field in taxonomy for research databases.
 */
function gsb_public_update_7131() {
  // Create a field
  $field = array(
    'field_name' => 'field_default_checkbox_status',
    'type' => 'list_text',
    'settings' => array(
      'allowed_values' => array(
        0 => 'Unchecked',
        1 => 'Checked',
      ),
    ),
  );
  field_create_field($field);

  // Attach the field to our taxonomy entity
  $instance = array(
    'field_name' => 'field_default_checkbox_status',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'research_databases',
    'label' => 'Default Checkbox Status',
    'required' => TRUE,
    'widget' => array(
      'type' => 'options_buttons',
      'weight' => -4,
    ),
    'default_value' => array(
      0 => array(
        'value' => 0,
      ),
    ),
  );
  field_create_instance($instance);
}

/**
 * Configures the expire module.
 */
function gsb_public_update_7132() {
  variable_set('expire_node_node_page', TRUE);
  variable_set('expire_node_actions', array(2 => 2));
}

/**
 * Updates the expire module configuration.
 */
function gsb_public_update_7133() {
  variable_set('expire_node_reference_pages', TRUE);
  variable_set('expire_node_actions', array(
    1 => 1,
    2 => 2,
  ));
}

/**
 * Delete field_prefix_teaching_materials and field_prefix_non_degree_course.
 */
function gsb_public_update_7134() {
  _gsb_public_delete_fields(array('field_prefix_teaching_materials', 'field_prefix_non_degree_course'));
}

/**
 * Initialize the new gsb_feature_working_paper_ct_item_id variable
 */
function gsb_public_update_7135() {
  variable_set('gsb_feature_working_paper_ct_item_id', 3000);
}


/**
 * Updates the program taxonomy term.
 */
function gsb_public_update_7136() {
// Updating the data to new field
  $vocabulary = taxonomy_vocabulary_machine_name_load('program');
  $terms = taxonomy_get_tree($vocabulary->vid);

  foreach ($terms as $key => $term) {
    if ($term->name == 'Social Innovation Program') {
      $term->name = 'Executive Program for Nonprofit Leaders';
      taxonomy_term_save($term);
    }
  }
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => 'Executive Program in Social Entrepreneurship',
    'weight' => 9,
  );
  taxonomy_term_save($term);
}

/**
 * Enables the GSB Auto Upload File module.
 */
function gsb_public_update_7137() {
  module_enable(array('gsb_auto_upload_file'));
}

/**
 * Add gsb_trim.
 */
function gsb_public_update_7138() {
  if (!module_exists('gsb_trim')) {
    module_enable(array('gsb_trim'));
  }
}

/**
 * Set new variable for expiring field collections.
 */
function gsb_public_update_7139() {
  variable_set('expire_node_reference_field_collection_pages', 1);
}

/**
 * Delete featured_person_fpp.
 */
function gsb_public_update_7140() {
  $fields = array('field_display_email', 'field_display_phone');
  _gsb_public_delete_fields($fields);

  $fields = array('field_title', 'field_body', 'field_person_ref');
  foreach ($fields as $field) {
    if ($instance = field_info_instance('fieldable_panels_pane', $field, 'featured_person')) {
      field_delete_instance($instance);
    }
  }

  field_purge_batch(10);

  module_disable(array('gsb_feature_featured_person_fpp'));
  drupal_uninstall_modules(array('gsb_feature_featured_person_fpp'));
}

/**
 * Updates the department taxonomy term.
 */
function gsb_public_update_7141() {
// Updating the data to new field
  $vocabulary = taxonomy_vocabulary_machine_name_load('department');
  $terms = taxonomy_get_tree($vocabulary->vid);

  foreach ($terms as $key => $term) {
    if ($term->name == 'Ignite Admissions') {
      $term->name = 'Stanford Ignite Admissions';
      taxonomy_term_save($term);
    }

    if ($term->name == 'SIGM Admissions') {
      $term->name = 'Summer Institute for General Management Admissions';
      taxonomy_term_save($term);
    }
  }
  taxonomy_term_save($term);
}

/**
 * Delete the existing slideshow fpps.
 */
function gsb_public_update_7142() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'fieldable_panels_pane')->entityCondition('bundle', 'slideshow');
  $result = $query->execute();
  if (isset($result['fieldable_panels_pane'])) {
    $nids = array_keys($result['fieldable_panels_pane']);
    fieldable_panels_panes_delete_multiple($nids);
  }
}

/**
 * Enable gsb_feature_homepage_cta_fpp.
 */
function gsb_public_update_7143() {
  if (!module_exists('gsb_feature_homepage_cta_fpp')) {
    module_enable(array('gsb_feature_homepage_cta_fpp'));
  }
}

/**
 * Convert image_cta fpps to new bg colors, and new image files.
 */
function gsb_public_update_7144() {
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  drupal_mkdir($scheme.'image-cta');
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'fieldable_panels_pane')->entityCondition('bundle', 'image_cta');
  $result = $query->execute();
  if (isset($result['fieldable_panels_pane'])) {
    $ids = array_keys($result['fieldable_panels_pane']);
    foreach($ids as $id) {
      $entity = fieldable_panels_panes_load($id);
      // move the image file
      $fid = $entity->field_file_single_public['und'][0]['fid'];
      $file_obj = file_load($fid);
      gsb_public_update_7144_fileMove($file_obj,'image-cta');
      // refetch the entity - with the updated file info
      $entity = fieldable_panels_panes_load_multiple(array($id), array(), TRUE);
      $entity = $entity[$id];
      // migrate the entity's file info from the older field to the new field
      $entity_file = $entity->field_file_single_public['und'][0];
      $entity->field_image_single_public['und'][0] = array(
        'fid' => $entity_file['fid'],
        'uid' => $entity->field_file_single_public['und'][0]['uid'],
        'uri' => $entity->field_file_single_public['und'][0]['uri'],
        'filemime' => $entity->field_file_single_public['und'][0]['filemime'],
        'filesize' => $entity->field_file_single_public['und'][0]['filesize'],
        'status' => $entity->field_file_single_public['und'][0]['status'],
        'timestamp' => $entity->field_file_single_public['und'][0]['timestamp'],
        'type' => $entity->field_file_single_public['und'][0]['type'],
        'uuid' => $entity->field_file_single_public['und'][0]['uuid'],
        'field_file_image_alt_text' => $entity->field_file_single_public['und'][0]['field_file_image_alt_text'],
        'field_file_image_title_text' => $entity->field_file_single_public['und'][0]['field_file_image_title_text'],
        'field_sections' => $entity->field_file_single_public['und'][0]['field_sections'],
        'field_file_image_alignment' => $entity->field_file_single_public['und'][0]['field_file_image_alignment'],
        'field_file_image_show_caption' => $entity->field_file_single_public['und'][0]['field_file_image_show_caption'],
        'metatags' => $entity->field_file_single_public['und'][0]['metatags'],
        'metadata' => $entity->field_file_single_public['und'][0]['metadata'],
        'alt' => $entity->field_file_single_public['und'][0]['alt'],
        'title' => $entity->field_file_single_public['und'][0]['title'],
        'width' => $entity->field_file_single_public['und'][0]['metadata']['width'],
        'height' => $entity->field_file_single_public['und'][0]['metadata']['height'],
      );
      fieldable_panels_panes_save($entity);
      // update the image bg color
      if (isset($entity->field_image_cta_bg_color['und'][0])) {
        if ($entity->field_image_cta_bg_color['und'][0]['value'] == 'green') {
          $entity->field_image_cta_bg_color['und'][0]['value'] = 'lime';
          fieldable_panels_panes_save($entity);
        }
        if ($entity->field_image_cta_bg_color['und'][0]['value'] == 'dark-teal') {
          $entity->field_image_cta_bg_color['und'][0]['value'] = 'teal';
          fieldable_panels_panes_save($entity);
        }
      }
    }
  }
}

/**
 * Move files as part of update 7144
 */
function gsb_public_update_7144_fileMove(&$file_obj, $destination) {
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  $destination_uri = $scheme . $destination . '/' . $file_obj->filename;
  $file_obj = file_move($file_obj, $destination_uri, FILE_EXISTS_RENAME);
}

/**
 * Update permissions for section editor, section manager and marketing admin
 */
function gsb_public_update_7145() {

  // Get the section editor user role
  $section_editor_user = user_role_load_by_name('section editor');

  $section_editor_user_permissions = array(
    // edit the image_cta
    'edit fieldable image_cta',
  );

  // Update section editor user role permissions
  user_role_grant_permissions($section_editor_user->rid, $section_editor_user_permissions);

  // Get the section manager user role
  $section_manager_user = user_role_load_by_name('section manager');

  $section_manager_user_permissions = array(
    // create/edit/delete the image_cta
    'create fieldable image_cta',
    'edit fieldable image_cta',
    'delete fieldable image_cta',
  );

  // Update section manager user role permissions
  user_role_grant_permissions($section_manager_user->rid, $section_manager_user_permissions);

  // Get the marketing admin user role
  $marketing_admin_user = user_role_load_by_name('marketing_admin');

  $marketing_admin_user_permissions = array(
    // create/edit/delete the homepage_cta and image_cta
    'create fieldable homepage_cta',
    'edit fieldable homepage_cta',
    'delete fieldable homepage_cta',
    'create fieldable image_cta',
    'edit fieldable image_cta',
    'delete fieldable image_cta',
  );

  // Update marketing admin user role permissions
  user_role_grant_permissions($marketing_admin_user->rid, $marketing_admin_user_permissions);

}

/**
 * Remove old fields from image_cta fpp
 */
function gsb_public_update_7146() {

  $entity_type = 'fieldable_panels_pane';
  $bundle = 'image_cta';

  $field_names = array(
    'field_title',
    'field_image_cta_text_pos',
    'field_file_single_public'
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance($entity_type, $field_name, $bundle);
    if (!empty($instance)) {
      field_delete_instance($instance);
    }
  }

}

/**
 * Enable better_formats
 */
function gsb_public_update_7147() {
  if (!module_exists('better_formats')) {
    module_enable(array('better_formats'));
  }
}

/**
 * Remove old fields from slideshow fpp.
 */
function gsb_public_update_7148() {
  $fields = array('field_slideshow_item', 'field_slideshow_style');
  _gsb_public_delete_fields($fields);
}

/**
 * Create new taxonomy for Region of Interest.
 */
function gsb_public_update_7149() {
  $_vocabulary = array(
    'name' => 'Region of Interest',
    'machine_name' => 'region_interest',
    'description' => t('Region of Interest taxonomy.'),
  );
  $vocabulary = (object) $_vocabulary;
  taxonomy_vocabulary_save($vocabulary);

  $vocab = taxonomy_vocabulary_machine_name_load('region_interest');

  $terms = array(
    'Africa',
    'Asia-Pacific',
    'Europe',
    'North America',
    'South America',
  );

  foreach ($terms as $term) {
    $newterm = new stdClass();
    $newterm->name = $term; // The name of the term
    $newterm->vid = $vocab->vid; // The ID of the parent vocabulary
    $newterm->parent = 0; // This tells taxonomy that this is a top-level term
    taxonomy_term_save($newterm);
  }
}

/**
 * Remove field_person_fac_ref from phd_candidate ct
 */
function gsb_public_update_7150() {

  $entity_type = 'node';
  $bundle = 'phd_candidate';

  $field_names = array(
    'field_person_fac_ref',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance($entity_type, $field_name, $bundle);
    if (!empty($instance)) {
      field_delete_instance($instance);
    }
  }
}

/**
 * Update Alumni Story fields.
 */
function gsb_public_update_7151() {
  $entity_type = 'node';
  $bundles = array('publication', 'book');

  $field_names = array(
    'field_salutation',
    'field_first_name',
    'field_middle_name',
    'field_last_name',
    'field_year',
  );
  foreach ($bundles as $bundle) {
    foreach ($field_names as $field_name) {
      $instance = field_info_instance($entity_type, $field_name, $bundle);
      if (!empty($instance)) {
        field_delete_instance($instance);
      }
    }
  }
}

/**
 * Delete the publication ct field region.
 */
function gsb_public_update_7152() {

  $instance = field_info_instance('node', 'field_region', 'publication');

  // Mark field for deletion.
  field_delete_instance($instance);

  // Remove field marked for deletion.
  field_purge_batch(10);

}

/**
 * Delete the book ct field region.
 */
function gsb_public_update_7153() {

  $instance = field_info_instance('node', 'field_region', 'book');

  // Mark field for deletion.
  field_delete_instance($instance);

  // Remove field marked for deletion.
  field_purge_batch(10);

}

/**
 * Delete the book ct field_salutation.
 */
function gsb_public_update_7154() {

  $instance = field_info_instance('node', 'field_salutation', 'book');

  // Mark field for deletion.
  field_delete_instance($instance);

  // Remove field marked for deletion.
  field_purge_batch(10);
}

/**
 * Delete the publication ct field_salutation.
 */
function gsb_public_update_7155() {

  $instance = field_info_instance('node', 'field_salutation', 'publication');

  // Mark field for deletion.
  field_delete_instance($instance);

  // Remove field marked for deletion.
  field_purge_batch(10);
}

/**
 * Enable gsb_feature_idea_story_ct
 */
function gsb_public_update_7156() {
  if (!module_exists('gsb_feature_idea_story_ct')) {
    module_enable(array('gsb_feature_idea_story_ct'));
  }
}

/**
 * Enable markdown module
 */
function gsb_public_update_7157() {
  if (!module_exists('markdown')) {
    module_enable(array('markdown'));
  }
}

/**
 * Enable resources and gsb_resources module.
 */
function gsb_public_update_7158() {
  if (!module_exists('resources')) {
    module_enable(array('resources'));
  }

  if (!module_exists('gsb_resources')) {
    module_enable(array('gsb_resources'));
  }
}

/**
 * Enable entityreference_autocomplete module
 */
function gsb_public_update_7159() {
  if (!module_exists('entityreference_autocomplete')) {
    module_enable(array('entityreference_autocomplete'));
  }
}

/**
 * Enable gsb_feature_idea_story_display module
 */
function gsb_public_update_7160() {
  if (!module_exists('gsb_feature_idea_story_display')) {
    module_enable(array('gsb_feature_idea_story_display'));
  }
}

/**
 * Update adminstrator user permissions for
 */
function gsb_public_update_7161() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');
  // Add the permission
  $adminstrator_user_permissions = array(
    'administer top idea stories',
  );
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Enable hs_lite module
 */
function gsb_public_update_7162() {
  if (!module_exists('hs_lite')) {
    module_enable(array('hs_lite'));
  }
}

/**
 * Enable Featured Insight Card FPP module.
 */
function gsb_public_update_7163() {
  if (!module_exists('gsb_feature_featured_insight_card_fpp')) {
    module_enable(array('gsb_feature_featured_insight_card_fpp'));
  }
}

/**
 * Enable gsb_feature_announcement_ct
 */
function gsb_public_update_7164() {
  if (!module_exists('gsb_feature_announcement_ct')) {
    module_enable(array('gsb_feature_announcement_ct'));
  }
}

/**
 * Enable gsb_feature_school_story_ct
 */
function gsb_public_update_7165() {
  if (!module_exists('gsb_feature_school_story_ct')) {
    module_enable(array('gsb_feature_school_story_ct'));
  }
}

/**
 * Enable mailchimp module.
 */
function gsb_public_update_7166() {
  if (!module_exists('mailchimp')) {
    module_enable(array('mailchimp'));
  }
}

/**
 * Enable gsb_feature_news_display module.
 */
function gsb_public_update_7167() {
  if (!module_exists('gsb_feature_news_display')) {
    module_enable(array('gsb_feature_news_display'));
  }
}

/**
 * Enable gsb_feature_pr_contact module.
 */
function gsb_public_update_7168() {
  if (!module_exists('gsb_feature_pr_contact')) {
    module_enable(array('gsb_feature_pr_contact'));
  }
}

/**
 * Enable gsb_rethink module.
 */
function gsb_public_update_7169() {
  if (!module_exists('gsb_rethink')) {
    module_enable(array('gsb_rethink'));
  }
}

/**
 * Enable gsb_feature_offsite_idea_story_ct module.
 */
function gsb_public_update_7170() {
  if (!module_exists('gsb_feature_offsite_idea_story_ct')) {
    module_enable(array('gsb_feature_offsite_idea_story_ct'));
  }
}

/**
 * Enable gsb_feature_offsite_school_story_ct module.
 */
function gsb_public_update_7171() {
  if (!module_exists('gsb_feature_offsite_school_story_ct')) {
    module_enable(array('gsb_feature_offsite_school_story_ct'));
  }
}

/**
 * Enable gsb_feature_ranking_ct module.
 */
function gsb_public_update_7172() {
  if (!module_exists('gsb_feature_ranking_ct')) {
    module_enable(array('gsb_feature_ranking_ct'));
  }
}

/**
 * Enable gsb_feature_topic_teaser_fpp module.
 */
function gsb_public_update_7173() {
  if (!module_exists('gsb_feature_topic_teaser_fpp')) {
    module_enable(array('gsb_feature_topic_teaser_fpp'));
  }
}

/**
 * Enable gsb_feature_ranking_display module.
 */
function gsb_public_update_7174() {
  if (!module_exists('gsb_feature_ranking_display')) {
    module_enable(array('gsb_feature_ranking_display'));
  }
}

/**
 * Swap gsb_feature_quote_fpp for gsb_feature_insights_quote_fpp.
 */
function gsb_public_update_7175() {
  if (module_exists('gsb_feature_quote_fpp')) {
    module_disable(array('gsb_feature_quote_fpp'));
    drupal_uninstall_modules(array('gsb_feature_quote_fpp'));
  }

  if (!module_exists('gsb_feature_insights_quote_fpp')) {
    module_enable(array('gsb_feature_insights_quote_fpp'));
  }
}

/**
 * Enable gsb_feature_taxonomy and gsb_feature_insight_display modules.
 */
function gsb_public_update_7176() {
  if (!module_exists('gsb_feature_taxonomy')) {
    module_enable(array('gsb_feature_taxonomy'));
  }
  if (!module_exists('gsb_feature_insight_display')) {
    module_enable(array('gsb_feature_insight_display'));
  }
}

/**
 * Update the user permissions for Insights Quote FPP
 */
function gsb_public_update_7177() {

  $marketing_12396_user = user_role_load_by_name('marketing:12396');
  $marketing_12396_permissions = array(
    'create fieldable insights_quote' => TRUE,
    'edit fieldable insights_quote' => TRUE,
    'delete fieldable insights_quote' => TRUE,
  );

  // Grant permissions to our 'marketing 12396' role
  user_role_change_permissions($marketing_12396_user->rid, $marketing_12396_permissions);
}

/**
 * Enable gsb_social module.
 */
function gsb_public_update_7178() {
  if (!module_exists('gsb_social')) {
    module_enable(array('gsb_social'));
  }
}

/**
 * Updating the Links FPP to use a link style of black-bar instead of red-bar
 */
function gsb_public_update_7179() {
  $num_updated = db_update('field_data_field_link_style')
    ->fields(array(
      'field_link_style_value' => 'black-bar',
    ))
    ->condition('field_link_style_value', 'red-bar', '=')
    ->execute();

  $num_updated = db_update('field_revision_field_link_style')
    ->fields(array(
      'field_link_style_value' => 'black-bar',
    ))
    ->condition('field_link_style_value', 'red-bar', '=')
    ->execute();
}

/**
 * Enable node_page_disable module.
 */
function gsb_public_update_7180() {
  module_enable(array('node_page_disable'));
}

/**
 * Removing references to the panopoly wysiwyg formats
 */
function gsb_public_update_7181() {

  $num_updated = db_update('field_data_field_body')
    ->fields(array(
      'field_body_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_body_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_editorial_summary')
    ->fields(array(
      'field_editorial_summary_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_editorial_summary_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_research_statement')
    ->fields(array(
      'field_research_statement_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_research_statement_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_witl_post_mba_goals')
    ->fields(array(
      'field_witl_post_mba_goals_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_witl_post_mba_goals_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_citation')
    ->fields(array(
      'field_citation_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_citation_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_description')
    ->fields(array(
      'field_description_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_description_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_job_market_paper_desc')
    ->fields(array(
      'field_job_market_paper_desc_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_job_market_paper_desc_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_teaching_statement')
    ->fields(array(
      'field_teaching_statement_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_teaching_statement_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_work_in_progress_desc')
    ->fields(array(
      'field_work_in_progress_desc_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_work_in_progress_desc_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_learning_objective')
    ->fields(array(
      'field_learning_objective_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_learning_objective_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_review')
    ->fields(array(
      'field_review_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_review_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_superhead')
    ->fields(array(
      'field_superhead_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_superhead_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_updated = db_update('field_data_field_text_slide')
    ->fields(array(
      'field_text_slide_format' => 'gsb_wysiwyg_text',
    ))
    ->condition('field_text_slide_format', 'panopoly_%', 'LIKE')
    ->execute();

  $num_deleted = db_delete('wysiwyg')
    ->condition('format', 'panopoly_html_text')
    ->execute();

  $num_deleted = db_delete('wysiwyg')
    ->condition('format', 'panopoly_wysiwyg_text')
    ->execute();

}

/**
 * Removes some field instances and fields that are no longer in use
 */
function gsb_public_update_7182() {
  $field_instances = array(
    array(
      'entity_type' => 'node',
      'field_name' => 'field_academic_degrees',
      'bundle' => 'student'
    ),
    array(
      'entity_type' => 'fieldable_panels_pane',
      'field_name' => 'field_body',
      'bundle' => 'quote'
    ),
    array(
      'entity_type' => 'fieldable_panels_pane',
      'field_name' => 'field_link_single',
      'bundle' => 'quote'
    ),
    array(
      'entity_type' => 'fieldable_panels_pane',
      'field_name' => 'field_quote_link_company',
      'bundle' => 'quote'
    ),
    array(
      'entity_type' => 'fieldable_panels_pane',
      'field_name' => 'field_quote_author_name_title',
      'bundle' => 'quote'
    ),
  );

  foreach ( $field_instances as $fi_info ) {
    $instance = field_info_instance(
      $fi_info['entity_type'],
      $fi_info['field_name'],
      $fi_info['bundle']
    );
    field_delete_instance($instance);
    field_purge_batch(10);
  }

  field_delete_field('field_quote_link_company');
  field_purge_batch(10);
  field_delete_field('field_quote_author_name_title');
  field_purge_batch(10);
}

/**
 * Delete the house-ads fpp fields.
 */
function gsb_public_update_7183() {

  $instance = field_info_instance('fieldable_panels_pane', 'field_house_ads_style', 'house_ads');

  // Mark field for deletion.
  field_delete_instance($instance);

  // Remove the field
  field_delete_field('field_house_ads_style');

  // Remove field marked for deletion.
  field_purge_batch(10);
}

/**
 * Delete field_degree_type from field collection academic degrees.
 */
function gsb_public_update_7184() {
  $instance = field_info_instance('field_collection_item', 'field_degree_type', 'field_academic_degrees');

  // Mark field for deletion.
  field_delete_instance($instance);

  // Remove the field
  field_delete_field('field_degree_type');

  // Remove field marked for deletion.
  field_purge_batch(10);
}

/**
 * Enable gsb_feature_metatag, metatag_twitter_cards and metatag_opengraph modules.
 */
function gsb_public_update_7185() {
  if (!module_exists('metatag_twitter_cards')) {
    module_enable(array('metatag_twitter_cards'));
  }
  if (!module_exists('metatag_opengraph')) {
    module_enable(array('metatag_opengraph'));
  }
  if (!module_exists('gsb_feature_metatag')) {
    module_enable(array('gsb_feature_metatag'));
  }
}

/**
 * Update the resource image format to be image_resource_caption.
 */
function gsb_public_update_7186() {
  $num_updated = db_update('field_data_field_body')
    ->fields(array(
      'field_body_format' => 'image_resource_caption',
    ))
    ->condition('bundle', 'resource_image', '=')
    ->execute();
}

/**
 * Enable filefield_paths module.
 */
function gsb_public_update_7187() {
  if (!module_exists('filefield_paths')) {
    module_enable(array('filefield_paths'));
  }
}

/**
 * Removes some field instances that are no longer in use
 */
function gsb_public_update_7188() {
  $field_instances = array(
    array(
      'entity_type' => 'node',
      'field_name' => 'field_industry',
      'bundle' => 'book'
    ),
    array(
      'entity_type' => 'node',
      'field_name' => 'field_industry',
      'bundle' => 'publication'
    ),
    array(
      'entity_type' => 'node',
      'field_name' => 'field_industry',
      'bundle' => 'event'
    ),
    array(
      'entity_type' => 'node',
      'field_name' => 'field_company_organization',
      'bundle' => 'book'
    ),
    array(
      'entity_type' => 'node',
      'field_name' => 'field_company_organization',
      'bundle' => 'publication'
    ),
    array(
      'entity_type' => 'node',
      'field_name' => 'field_company_organization',
      'bundle' => 'event'
    ),
    array(
      'entity_type' => 'node',
      'field_name' => 'field_discipline',
      'bundle' => 'event'
    ),
  );

  foreach ( $field_instances as $fi_info ) {
    $instance = field_info_instance(
      $fi_info['entity_type'],
      $fi_info['field_name'],
      $fi_info['bundle']
    );
    field_delete_instance($instance);
    field_purge_batch(10);
  }
}

/**
 * Configure GSB Robots
 */
function gsb_public_update_7189() {
  if (!module_exists('gsb_robots')) {
    module_enable(array('gsb_robots'));
  }

  $content = "
  #
  # robots.txt
  #
  # This file is to prevent the crawling and indexing of certain parts
  # of your site by web crawlers and spiders run by sites like Yahoo!
  # and Google. By telling these 'robots' where not to go on your site,
  # you save bandwidth and server resources.
  #
  # This file will be ignored unless it is at the root of your host:
  # Used:    http://example.com/robots.txt
  # Ignored: http://example.com/site/robots.txt
  #
  # For more information about the robots.txt standard, see:
  # http://www.robotstxt.org/robotstxt.html
  #
  # For syntax checking, see:
  # http://www.frobee.com/robots-txt-check

  User-agent: *
  Crawl-delay: 10
  # Directories
  Disallow: /file/
  Disallow: /includes/
  Disallow: /misc/
  Disallow: /modules/
  Disallow: /profiles/
  Disallow: /scripts/
  Disallow: /themes/
  # Files
  Disallow: /CHANGELOG.txt
  Disallow: /cron.php
  Disallow: /INSTALL.mysql.txt
  Disallow: /INSTALL.pgsql.txt
  Disallow: /INSTALL.sqlite.txt
  Disallow: /install.php
  Disallow: /INSTALL.txt
  Disallow: /LICENSE.txt
  Disallow: /MAINTAINERS.txt
  Disallow: /update.php
  Disallow: /UPGRADE.txt
  Disallow: /xmlrpc.php
  # Paths (clean URLs)
  Disallow: /admin/
  Disallow: /comment/reply/
  Disallow: /filter/tips/
  Disallow: /node/add/
  Disallow: /search/
  Disallow: /user/register/
  Disallow: /user/password/
  Disallow: /user/login/
  Disallow: /user/logout/
  # Paths (no clean URLs)
  Disallow: /?q=admin/
  Disallow: /?q=comment/reply/
  Disallow: /?q=filter/tips/
  Disallow: /?q=node/add/
  Disallow: /?q=search/
  Disallow: /?q=user/password/
  Disallow: /?q=user/register/
  Disallow: /?q=user/login/
  Disallow: /?q=user/logout/
  ";
  variable_set("gsb_robots_content", $content);
}

/**
 * Setting gsb_feature_case_display to follow panopoly_magic, in the module peckin' order.
 */
function gsb_public_update_7190() {
  // Make the weight of our module one higher than panopoly_magic.
  $weight = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', 'panopoly_magic', '=')
    ->execute()
    ->fetchField();

  db_update('system')
    ->fields(array('weight' => $weight +1))
    ->condition('name', 'gsb_feature_case_display', '=')
    ->execute();
}

/**
 * Add pubdate format.
 */
function gsb_public_update_7191() {
  // Insert custom format: Mon, 20 Oct 2014 13:44:37 PDT
  db_insert('date_formats')
    ->fields(array('format' => 'D, d M Y H:i:s T', 'type' => 'custom', 'locked' => 0))
    ->execute();
  // Insert custom format: Mon, 20 Oct 2014 13:44:37 PDT
  db_insert('date_format_type')
    ->fields(array('type' => 'pubdate', 'title' => 'pubDate', 'locked' => 0))
    ->execute();
  // Date Time only Format
  variable_set('date_format_pubdate', 'D, d M Y H:i:s T');
}

/**
 * Disable and uninstall panopoly modules.
 */
function gsb_public_update_7192() {
  // Disable and uninstall the modules
  module_disable(array('panopoly_magic', 'panopoly_magic_customization'));
  drupal_uninstall_modules(array('panopoly_magic', 'gsb_panopoly_magic_customization'));

  // Delete the old vocabulary.
  $vocab = taxonomy_vocabulary_machine_name_load('panopoly_categories');
  taxonomy_vocabulary_delete($vocab->vid);

  // Delete old field.
  _gsb_public_delete_fields(array('field_featured_image'));
}

/**
 * Update all the url aliases for all the phd_candidate nodes
 */
function gsb_public_update_7193() {
  $entity_type = 'node';
  $bundle = 'phd_candidate';
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)->entityCondition('bundle', $bundle);
  $result = $query->execute();
  $nids = array_keys($result['node']);
  pathauto_node_update_alias_multiple($nids, 'bulkupdate', array('force' => TRUE));
}

/**
 * Enable gsb_submenu_alias_update module.
 */
function gsb_public_update_7194() {
  if (!module_exists('gsb_submenu_alias_update')) {
    module_enable(array('gsb_submenu_alias_update'));
  }
}

/**
 * Enable email_contact modules.
 */
function gsb_public_update_7195() {
  if (!module_exists('email_contact')) {
    module_enable(array('email_contact'));
  }
}

/**
 * Delete field_program_single field instance from the following:
 *  'announcement',
 *   'idea_story',
 *   'school_story',
 *   'offsite_school_story',
 *   'offsite_idea_story',
 *   'book',
 *   'publication'
 */
function gsb_public_update_7196() {
  $field_name = 'field_program_single';
  $content_types = array(
    'announcement',
    'idea_story',
    'school_story',
    'offsite_school_story',
    'offsite_idea_story',
    'book',
    'publication'
  );
  foreach ($content_types as $ct) {
    $instance = field_info_instance('node', $field_name, $ct);
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Move old widget variable from panopoly magic to override_title variable.
 */
function gsb_public_update_7197() {
  $results = db_select('panels_pane', 'p')
    ->fields('p')
    ->execute();

  while ($result = $results->fetchAssoc()) {
    $configuration = unserialize($result['configuration']);
    if (!empty($configuration['widget_title'])) {
      $configuration['override_title'] = TRUE;
      $configuration['override_title_text'] = $configuration['widget_title'];

      db_update('panels_pane')
        ->fields(array('configuration' => serialize($configuration)))
        ->condition('pid', $result['pid'])
        ->execute();
    }
  }
}


/**
 * Remove unused Menu block items.
 */
function gsb_public_update_7198() {
  $deltas = array (15, 16, 22);
  foreach ( $deltas as $delta ) {
    variable_del("menu_block_{$delta}_title_link");
    variable_del("menu_block_{$delta}_admin_title");
    variable_del("menu_block_{$delta}_parent");
    variable_del("menu_block_{$delta}_level");
    variable_del("menu_block_{$delta}_follow");
    variable_del("menu_block_{$delta}_depth");
    variable_del("menu_block_{$delta}_expanded");
    variable_del("menu_block_{$delta}_sort");

    db_delete('block')->condition('module', 'menu_block')->condition('delta', $delta)->execute();
    db_delete('block_role')->condition('module', 'menu_block')->condition('delta', $delta)->execute();
  }
}

/**
 * Copy old Action values to new CTA Action.
 */
function gsb_public_update_7199() {
  // Revert all the required features
  $features = array ('gsb_feature_taxonomy', 'gsb_feature_base_fields', 'gsb_feature_cta');
  foreach($features as $feature_name) {
    $feature = features_get_features('gsb_feature_taxonomy', TRUE);
    $components = array_keys($feature->info['features']);
    features_revert(array($feature_name => $components));
  }

  // Add terms to cta action from action field
  $field = field_info_field('field_cta_action');
  foreach($field['settings']['allowed_values'] as $term_name){
    $vocabulary = taxonomy_vocabulary_machine_name_load('cta_action');
    $new_term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => $term_name,
    );
    taxonomy_term_save($new_term);
  }

  $entity_type = 'fieldable_panels_pane';
  // Get list of all cta's
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'cta');

  $entities = $query->execute();
  // Loop through all cta's
  foreach($entities[$entity_type] as $entity) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity->fpid);
    // Loop each field collection
    foreach ($wrapper->field_cta_item->value() as $field_collection) {
      $field_cta_action = $field_collection->field_cta_action;
      $key = $field_cta_action['und'][0]['value'];

      // Get the values
      $name = $field['settings']['allowed_values'][$key];
      $term = taxonomy_get_term_by_name($name);
      $tid = array_shift($term)->tid;

      // Get the field collection
      $collection_wrapper = entity_metadata_wrapper('field_collection_item', $field_collection);
      $collection_wrapper->field_cta_action_item = $tid;
      $collection_wrapper->save();
    }
  }
}

/**
 * Delete field_cta_action field instance and field.
 */
function gsb_public_update_7200() {
  $instance = field_info_instance('field_collection', 'field_cta_action', 'field_cta_item');
  field_delete_instance($instance);

  // Remove the field
  field_delete_field('field_cta_action');
  field_purge_batch(10);
}

/**
 * Enable gsb_feature_files_fpp module.
 */
function gsb_public_update_7201() {
  if (!module_exists('gsb_feature_files_fpp')) {
    module_enable(array('gsb_feature_files_fpp'));
  }
}

/**
 * Update Menu items.
 */
function gsb_public_update_7202() {
  // Update menu items
  $num_updated = db_update('menu_custom')
    ->fields(array(
      'title' => 'Author Menu: Faculty Administration',
    ))
    ->condition('menu_name', 'menu-faculty-administration', '=')
    ->execute();

  $num_updated = db_update('menu_custom')
    ->fields(array(
      'title' => 'Section Menu: Library',
    ))
    ->condition('menu_name', 'section-13051', '=')
    ->execute();

  $num_updated = db_update('menu_custom')
    ->fields(array(
      'title' => 'Author Menu: Marketing',
    ))
    ->condition('menu_name', 'menu-marketing', '=')
    ->execute();

  $num_updated = db_update('menu_custom')
    ->fields(array(
      'title' => 'Section Menu: MBA',
    ))
    ->condition('menu_name', 'section-12401', '=')
    ->execute();

  $num_updated = db_update('menu_custom')
    ->fields(array(
      'title' => 'Section Menu: MSx',
    ))
    ->condition('menu_name', 'section-12406', '=')
    ->execute();
}

/**
 * Update block admin title.
 */
function gsb_public_update_7203() {

  // Update agenda admin title
  $num_updated = db_update('agenda')
    ->fields(array(
      'value' => 'Library: Hours',
    ))
    ->condition('bid', 2, '=')
    ->condition('name', 'title', '=')
    ->execute();

  // Update Twitter CTA fpp
  $num_updated = db_update('fieldable_panels_panes')
    ->fields(array(
      'admin_title' => 'CTA: Twitter | Faculty List (green)',
    ))
    ->condition('fpid', '9266', '=')
    ->execute();

  $deltas = array(
    17 => 'Faculty & Research: Academic Areas',
    21 => 'Alumni: Consultant Toolkit',
    9 => 'MBA: Application Materials',
    18 => 'Library: Audiences',
    12 => 'Financial Aid: Loan Forgiveness',
    11 => 'MBA: Application Materials',
    7 => 'Financial Aid: Fellowships',
    13 => 'PhD: Fields of Study',
    14 => 'PhD: Application Materials',
    5 => 'Stanford University Community: Plan Event',
    8 => 'MSx: Application Materials',
  );

  foreach ( $deltas as $delta => $value ) {
    variable_set("menu_block_{$delta}_admin_title", $value);
  }
}

/**
 * Enable gsb_misc_fixes module.
 */
function gsb_public_update_7204() {
  if (!module_exists('gsb_misc_fixes')) {
    module_enable(array('gsb_misc_fixes'));
  }
}

/**
 * Enable gsb_restricted_pages module.
 */
function gsb_public_update_7205() {
  if (!module_exists('gsb_restricted_pages')) {
    module_enable(array('gsb_restricted_pages'));
  }
}

/**
 * Enable alumni_cas_auth module.
 */
function gsb_public_update_7206() {
  if (!module_exists('alumni_cas_auth')) {
    module_enable(array('alumni_cas_auth'));
  }
  // Create the alumnipg role
  $alumnipg_role = new stdClass();
  $alumnipg_role->name = 'alumnipg';
  $alumnipg_role->weight = 12;
  user_role_save($alumnipg_role);
}

/**
 * Enable new gsb_feature_alumni_ct module.
 */
function gsb_public_update_7207() {
  if (!module_exists('gsb_feature_alumni_ct')) {
    module_enable(array('gsb_feature_alumni_ct'));
  }
}

/**
 * Rename items - modal window blocks.
 */
function gsb_public_update_7208() {
  // Update modal window title
  $num_updated = db_update('agenda')
    ->fields(array('value' => 'Library Hours',))
    ->condition('bid', 2, '=')
    ->condition('name', 'title', '=')
    ->execute();

  $num_updated = db_update('block_custom')
    ->fields(array('info' => 'Front: Giving',))
    ->condition('bid', 16, '=')
    ->execute();

  // Update the menu block variable
  $deltas = array(
    21 => 'Menu Block: Alumni | Consultant Toolkit',
    24 => 'Menu Block: Alumni | Transition Profiles',
    17 => 'Menu Block: Faculty & Research | Academic Areas',
    7 => 'Menu Block: Financial Aid | Fellowships',
    12 => 'Menu Block: Financial Aid | Loan Forgiveness',
    20 => 'Section Menu: Insights | Footer',
    19 => 'Section Menu: Insights | Footer Topics',
    18 => 'Menu Block: Library | Audiences',
    9 => 'Menu Block: MBA | Application Materials',
    11 => 'Menu Block: MBA | Application Materials',
    13 => 'Menu Block: PhD | Fields of Study',
    14 => 'Menu Block: PhD | Application Materials',
    8 => 'Menu Block: MSx | Application Materials',
    5 => 'Menu Block: SU Community | Plan Event',
    15 => 'Mega Menu',
    16 => 'Mega Menu',
    22 => 'Mega Menu: Insights',
    23 => 'Menu Block: TSE | Leadership Experiences',
  );

  foreach ( $deltas as $delta => $value ) {
    variable_set("menu_block_{$delta}_admin_title", $value);
  }

  // Delete the agenda example block
  $num_deleted = db_delete('agenda')
    ->condition('bid', 1, '=')
    ->execute();

  $num_deleted = db_delete('block_custom')
    ->condition('bid', 6, '=')
    ->execute();
}

/**
 * Rename items - modal window menus.
 */
function gsb_public_update_7209() {
  // Define the menus for update
  $menus = array(
    'menu-alumni-utility-nav' => 'Section Menu: Alumni | Utility',
    'section-13071' => 'Section Menu: Alumni',
    'section-13186' => 'Section Menu: Behavioral Lab',
    'section-26671' => 'Section Menu: Companies, Organizations, & Recruiters',
    'section-12461' => 'Section Menu: Contact Us',
    'section-13021' => 'Section Menu: Custom Programs',
    'section-13046' => 'Section Menu: Faculty & Research',
    'menu-footer-alumni-section' => 'Section Menu: Alumni | Footer',
    'section-27256' => 'Section Menu: Insights | Topics',
    'menu-insights-footer-bottom-menu' => 'Section Menu: Insights | Footer Bottom',
    'section-27251' => 'Section Menu: Insights',
    'section-12946' => 'Section Menu: Jobs',
    'section-12456' => 'Section Menu: Newsroom',
    'section-28606' => 'Section Menu: NonGSBReg',
    'section-12481' => 'Section Menu: PhD',
    'section-13191' => 'Section Menu: RAIL',
    'section-13146' => 'Section Menu: Research Fellows',
    'menu-section-editor-toolbar' => 'Author Menu: Section Editor',
    'menu-section-manager-toolbar' => 'Author Menu: Section Manager',
    'section-12956' => 'Section Menu: Social Innovation',
    'section-12261' => 'Section Menu: TSE',
    'section-13001' => 'Section Menu: Stanford Ignite',
    'section-13011' => 'Section Menu: SIE Certificate',
    'section-12421' => 'Section Menu: SU Community',
    'section-13016' => 'Section Menu: SIGM',
    'section-12416' => 'Section Menu: Visit Us',
  );

  foreach ( $menus as $key => $value ) {
    $num_updated = db_update('menu_custom')
      ->fields(array('title' => $value,))
      ->condition('menu_name', $key, '=')
      ->execute();
  }
}

/**
 * Workbench Access - update permissions
 */
function gsb_public_update_7210() {
  // Set permissions for marketing admin and marketing:12396
  //workbench_access_role_section_save(71, 12256, 'taxonomy'); // Alumni permissions
  workbench_access_role_section_save(31, 13186, 'taxonomy'); // Behavioral Lab
  workbench_access_role_section_save(31, 26671, 'taxonomy'); // Companies & Recruiters
  workbench_access_role_section_save(31, 13021, 'taxonomy'); // Custom Programs
  workbench_access_role_section_save(31, 13046, 'taxonomy'); // Faculty & Reserch
  workbench_access_role_section_save(31, 13056, 'taxonomy'); // Financial Aid
  workbench_access_role_section_save(31, 27251, 'taxonomy'); // Insights
  workbench_access_role_section_save(31, 27256, 'taxonomy'); // Insight Topics
  workbench_access_role_section_save(31, 12946, 'taxonomy'); // Jobs
  workbench_access_role_section_save(31, 13051, 'taxonomy'); // Library
  workbench_access_role_section_save(71, 12401, 'taxonomy'); // MBA
  workbench_access_role_section_save(31, 12401, 'taxonomy'); // MBA
  workbench_access_role_section_save(71, 12406, 'taxonomy'); // MSx
  workbench_access_role_section_save(31, 12406, 'taxonomy'); // MSx
  workbench_access_role_section_save(71, 12456, 'taxonomy'); // Newsroom
  workbench_access_role_section_save(31, 12456, 'taxonomy'); // Newsroom
  workbench_access_role_section_save(31, 28606, 'taxonomy'); // NonGSBReg
  workbench_access_role_section_save(71, 12481, 'taxonomy'); // PhD
  workbench_access_role_section_save(31, 12481, 'taxonomy'); // PhD
  workbench_access_role_section_save(31, 13191, 'taxonomy'); // RAIL
  workbench_access_role_section_save(31, 13146, 'taxonomy'); // Research Fellows
  workbench_access_role_section_save(31, 12956, 'taxonomy'); // Social Innovation
  workbench_access_role_section_save(71, 12261, 'taxonomy'); // Stanford GSB Experience
  workbench_access_role_section_save(31, 12261, 'taxonomy'); // Stanford GSB Experience
  workbench_access_role_section_save(31, 13001, 'taxonomy'); // Stanford Ignite
  workbench_access_role_section_save(71, 12421, 'taxonomy'); // Stanford University Community
  workbench_access_role_section_save(31, 12421, 'taxonomy'); // Stanford University Community
  workbench_access_role_section_save(31, 13016, 'taxonomy'); // Summer Institute for General Management
  workbench_access_role_section_save(71, 12416, 'taxonomy'); // Visit Us
  workbench_access_role_section_save(31, 12416, 'taxonomy'); // Visit Us
}

/**
 * Workbench Access - update permissions set 2
 */
function gsb_public_update_7211() {
  workbench_access_role_section_save(21, 12256, 'taxonomy'); // Administrators  permissions
  workbench_access_role_section_save(31, 13071, 'taxonomy'); // Alumni  permissions
  workbench_access_role_section_save(36, 13056, 'taxonomy'); // Financial Aid - MBA Role
}

/**
 * Migrated image media file selector to image field for image fpp.
 */
function gsb_public_update_7212() {
  $entity_type = 'fieldable_panels_pane';
  //$image_fpp = 'public://image-fpp';
  //file_prepare_directory($image_fpp, FILE_CREATE_DIRECTORY);

  // Get list of all image fpp
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'image');

  $entities = $query->execute();

  // Loop through all image fpp
  foreach($entities[$entity_type] as $entity) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity->fpid);
    $image_content = $wrapper->field_file_single_public->value();
    $uri = $image_content['uri'];
    if(file_exists($uri)) {
      if($entity->fpid != 15826) { // Special condition for this error image fpp
        // Create managed File object and associate with Image field.
        $file = (object) array(
          'uid' => $image_content['uid'],
          'uri' => $uri,
          'filemime' => file_get_mimetype($uri),
          'status' => 1,
        );
        // We save the file to the root of the files directory.
        $image_file = file_copy($file, 'public://image-fpp', FILE_EXISTS_RENAME);

        $wrapper->field_image_single_public->set((array)$image_file);

        // Finally save the entity
        $wrapper->save();
      }
    }
  }
}

/**
 * Delete field_file_single_public field instance.
 */
function gsb_public_update_7213() {
  $instance = field_info_instance('fieldable_panels_pane', 'field_file_single_public', 'image');
  field_delete_instance($instance);

  field_purge_batch(10);
}

/**
 * Enable new gsb_feature_alumni_reunion_group_page_ct module.
 */
function gsb_public_update_7214() {
  if (!module_exists('gsb_feature_alumni_reunion_group_page_ct')) {
    module_enable(array('gsb_feature_alumni_reunion_group_page_ct'));
  }
}

/**
 * Enable new gsb_feature_alumni_reunion_session_ct module.
 */
function gsb_public_update_7215() {
  if (!module_exists('gsb_feature_alumni_reunion_session_ct')) {
    module_enable(array('gsb_feature_alumni_reunion_session_ct'));
  }
}

/**
 * Enable new gsb_feature_alumni_reunion_agenda_item_ct module.
 */
function gsb_public_update_7216() {
  if (!module_exists('gsb_feature_alumni_reunion_agenda_item_ct')) {
    module_enable(array('gsb_feature_alumni_reunion_agenda_item_ct'));
  }
}

/**
 * Enable new gsb_feature_chute_fpp module.
 */
function gsb_public_update_7217() {
  if (!module_exists('gsb_feature_chute_fpp')) {
    module_enable(array('gsb_feature_chute_fpp'));
  }
}

/**
 * Enable new gsb_feature_alumni_reunion_agenda_item_display module.
 */
function gsb_public_update_7218() {
  if (!module_exists('gsb_feature_alumni_reunion_agenda_item_display')) {
    module_enable(array('gsb_feature_alumni_reunion_agenda_item_display'));
  }
}

/**
 * Enable new gsb_feature_featured_content_fpp module.
 */
function gsb_public_update_7219() {
  if (!module_exists('gsb_feature_featured_content_fpp')) {
    module_enable(array('gsb_feature_featured_content_fpp'));
  }
}

/**
 * Enable new gsb_feature_alumni_reunion_group_page_display module.
 */
function gsb_public_update_7220() {
  if (!module_exists('gsb_feature_alumni_reunion_group_page_display')) {
    module_enable(array('gsb_feature_alumni_reunion_group_page_display'));
  }
}

/**
 * Enable new gsb_feature_act_ct module.
 */
function gsb_public_update_7221() {
  if (!module_exists('gsb_feature_act_ct')) {
    module_enable(array('gsb_feature_act_ct'));
  }
}

/**
 * Delete field_addthis field instance from the following:
 * Event, Club, JABCO, MSx-Fellows, Page, Staff, Webform
 */
function gsb_public_update_7222() {
  $field_name = 'field_addthis';
  $content_types = array(
    'event',
    'club',
    'publication',
    'msx-fellows',
    'page',
    'staff',
    'webform',
  );
  foreach ($content_types as $ct) {
    $instance = field_info_instance('node', $field_name, $ct);
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete addthis fields from the panes
 */
function gsb_public_update_7223() {
  //DELETE FROM `panels_pane` WHERE subtype = 'node:field_addthis'
  $num_deleted = db_delete('panels_pane')
    ->condition('subtype', 'node:field_addthis')
    ->execute();
}

/**
 * Enable new gsb_feature_act_display module.
 */
function gsb_public_update_7224() {
  if (!module_exists('gsb_feature_act_display')) {
    module_enable(array('gsb_feature_act_display'));
  }
}

/**
 * Set the api key for Google
 */
function gsb_public_update_7225() {
  $key = variable_get('googleapi_override_key', '');
  $fields = array(
    'value' => $key,
    'bid' => '2',
    'name' => 'googleapi_override'
  );
  db_insert('agenda')
    ->fields($fields)
    ->execute();
}

/**
 * Update our Library settings for Agenda
 */
function gsb_public_update_7226() {
  $bid = 2;

  $name = 'googleapi_override';
  $value = variable_get('googleapi_override_key', '');
  agenda_variable_set($bid, $name, $value);

  $name = 'maxevents';
  $value = 1;
  agenda_variable_set($bid, $name, $value);
}

/**
 * Enable new gsb_feature_google_tag_manager module.
 */
function gsb_public_update_7227() {
  if (!module_exists('gsb_feature_google_tag_manager')) {
    module_enable(array('gsb_feature_google_tag_manager'));
  }
}

/**
 * Disable the gsb_trim module.
 */
function gsb_public_update_7228() {
  module_disable(array('gsb_trim'));
  drupal_uninstall_modules(array('gsb_trim'));
}

/**
 * Enable metatag_panels module.
 */
function gsb_public_update_7229() {
  if (!module_exists('metatag_panels')) {
    module_enable(array('metatag_panels'));
  }
}

/**
 * Delete aliases for alumni reunion agenda item.
 */
function gsb_public_update_7230() {
  $result = db_query("SELECT pid FROM {url_alias} WHERE source IN(SELECT concat('node/', nid) FROM {node} WHERE type = 'alumni_reunion_agenda_item')");
  $records = $result->fetchCol();
  foreach($records as $pid) {
    path_delete($pid);
  }
}

/**
 * Upload the redirects.
 */
function gsb_public_update_7231(){
  $filename = 'P5 Content Tracker - Final Other Redirects.csv';
  $file_path = 'profiles/gsb_public/imports/'.$filename;
  $row = 1;
  if (($handle = fopen($file_path, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $row++;
      if ($row > 2) {  // Excluded title row from csv
        $source_url = $data[0];
        $redirect_url = $data[1];
        if ($source_url != "" && $redirect_url != "") {
          $redirect = array('source' => $source_url, 'redirect' => $redirect_url);
          $redirect_object = new stdClass();
          redirect_object_prepare($redirect_object, $redirect);
          // Check if the redirect exists before saving.
          if (!redirect_load_by_source($source_url)) {
            redirect_save($redirect_object);
          }
        }
      }
    }
    fclose($handle);
  }
  else {
    watchdog('gsb_public','Error in reading File');
  }
}

/**
 * Setting tranlitereate to be on.
 */
function gsb_public_update_7232() {
  variable_set("pathauto_transliterate", 1);
}

/**
 * Enable transliteration module.
 */
function gsb_public_update_7233() {
  if (!module_exists('transliteration')) {
    module_enable(array('transliteration'));
  }
  variable_set("pathauto_transliterate", 1);
}

/**
 * Disable googleanalytics module.
 */
function gsb_public_update_7234() {
// Removed from this release.
  /**
  if (module_exists('googleanalytics')) {
  module_disable(array('googleanalytics'));
  }
   **/
}

/**
 * Create new taxonomy for Department/Office.
 */
function gsb_public_update_7235() {
  $_vocabulary = array(
    'name' => 'Department/Office',
    'machine_name' => 'department_office',
    'description' => t('Department/Office taxonomy.'),
  );
  $vocabulary = (object) $_vocabulary;
  taxonomy_vocabulary_save($vocabulary);

  // Copy the data to new field
  $depart_vocabulary = taxonomy_vocabulary_machine_name_load('department');
  $terms = taxonomy_get_tree($depart_vocabulary->vid);

  foreach ($terms as $key => $term) {
    $new_term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => $term->name,
    );
    taxonomy_term_save($new_term);
  }
}

/**
 * Revert all the required features for department migration
 */
function gsb_public_update_7236() {
  $features = array ('gsb_feature_base_fields', 'gsb_feature_staff_ct');
  foreach($features as $feature_name) {
    features_revert_module($feature_name);
  }
  cache_clear_all();
}

/**
 * Create the field collection wrapper
 */
function _gsb_public_update_create_fc_wrapper($entity_type, $entity) {
  // Create a field_collection_item entity
  $fc_item = entity_create('field_collection_item', array('field_name' => 'field_staff_item'));

  $node = node_load($entity->nid);

  // Attach it to the node and Wrap it with Entity API
  $fc_item->setHostEntity($entity_type, $node);
  $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
  return $fc_wrapper;
}

/**
 * Migrate old department data to new taxonomy field department office.
 */
function gsb_public_update_7237() {
  $entity_type = 'node';

  // Get list of all staff nodes
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'staff');

  $entities = $query->execute();

  // Loop through all staff nodes
  foreach ($entities[$entity_type] as $entity) {

    // Get the old departments
    $wrapper = entity_metadata_wrapper($entity_type, $entity->nid);
    $old_department_tids = $wrapper->field_department->raw();

    if (isset($old_department_tids) && !empty($old_department_tids)) {
      foreach ($old_department_tids as $old_department_tid) {
        $term_old = taxonomy_term_load($old_department_tid);
        $term = taxonomy_get_term_by_name($term_old->name, 'department_office');
        $term = array_values($term);

        $fc_wrapper = _gsb_public_update_create_fc_wrapper($entity_type, $entity);
        $fc_wrapper->field_department_office->set($term[0]->tid);

        // Finally save the field collection
        $fc_wrapper->save();
      }
    }

    // Migrate old title position field
    $wrapper = entity_metadata_wrapper($entity_type, $entity->nid);
    $old_title_positions = $wrapper->field_title_position_unlimited->raw();
    if (isset($old_title_positions) && !empty($old_title_positions)) {
      if (empty($wrapper->field_staff_item) || $wrapper->field_staff_item[0]->value() == NULL) {
        $fc_wrapper = _gsb_public_update_create_fc_wrapper($entity_type, $entity);
      }
      else {
        // Wrap it with Entity API
        $field_staff_item = $wrapper->field_staff_item[0]->value();
        $fc_wrapper = entity_metadata_wrapper('field_collection_item', $field_staff_item);
      }
      $fc_wrapper->field_title_position_single->set($old_title_positions[0]);
      $fc_wrapper->save();
    }
  }
}

/**
 * Delete the older department and title/position instance from staff CT.
 */
function gsb_public_update_7238() {
  $field_names = array(
    'field_department',
    'field_title_position_unlimited',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'staff');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Staff nodes enable "Generate automatic URL alias" check-box.
 */
function gsb_public_update_7239() {
  $entity_type = 'node';

  // Get list of all staff nodes
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'staff');

  $entities = $query->execute();

  // Loop through all staff nodes
  foreach ($entities[$entity_type] as $entity) {
    $node = node_load($entity->nid);
    $node->path['pathauto'] = true;
    node_save($node);
  }
}

/**
 * Enable soundcloud_api module.
 */
function gsb_public_update_7240() {
  if (!module_exists('soundcloud_api')) {
    module_enable(array('soundcloud_api'));
  }
}

/**
 * Revert features required for data migration.
 */
function gsb_public_update_7241() {
  $features = array ('gsb_feature_base_fields', 'gsb_feature_book_ct');
  foreach($features as $feature_name) {
    features_revert_module($feature_name);
  }
  cache_clear_all();
}

/**
 * Migrate "where to buy" data to new field for Book CT.
 */
function gsb_public_update_7242() {

  $entity_type = 'node';

  // Get all book nodes
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'book');

  $entities = $query->execute();

  // Loop through all book nodes
  foreach ($entities[$entity_type] as $entity) {
    // Get the old where to buy
    $wrapper = entity_metadata_wrapper($entity_type, $entity->nid);
    $old_wheretobuy = $wrapper->field_link_unlimited->raw();
    if (isset($old_wheretobuy) && !empty($old_wheretobuy)) {
      $wrapper->field_link_where_buy_unlimited->set($old_wheretobuy);
      $wrapper->field_link_unlimited->set(null);
      $wrapper->save();
    }
  }
}

/**
 * Enable stark theme.
 */
function gsb_public_update_7243() {
  if (in_array('stark', array_keys(list_themes()))) {
    theme_enable(array('stark'));
  }
}

/**
 * Remove the alumni ref field.
 */
function gsb_public_update_7244() {
  $content_types = array(
    'act',
    'alumni_reunion_agenda_item',
  );
  foreach ($content_types as $content_type) {
    $instance = field_info_instance('node', 'field_alumni_ref', $content_type);
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Remove the person faculty ref field.
 */
function gsb_public_update_7245() {
  $content_types = array(
    'act',
    'alumni_reunion_agenda_item',
  );
  foreach ($content_types as $content_type) {
    $instance = field_info_instance('node', 'field_person_fac_ref', $content_type);
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Enable checkall module.
 */
function gsb_public_update_7246() {
  if (!module_exists('checkall')) {
    module_enable(array('checkall'));
  }
}

/**
 * Remove the program field.
 */
function gsb_public_update_7247() {
  $instance = field_info_instance('node', 'field_program_unlimited', 'academic_calendar_event');
  field_delete_instance($instance);

  field_purge_batch(10);
}

/**
 * Enable gsb_feature_existing_node_list_fpp module.
 */
function gsb_public_update_7248() {
  if (!module_exists('gsb_feature_existing_node_list_fpp')) {
    module_enable(array('gsb_feature_existing_node_list_fpp'));
  }
}

/**
 * Disable gsb_academic_year module.
 */
function gsb_public_update_7249() {
  module_disable(array('gsb_academic_year'));
  drupal_uninstall_modules(array('gsb_academic_year'));
}
/**
 * Enable gsb_feature_view_modes module.
 */
function gsb_public_update_7250() {
  if (!module_exists('gsb_feature_view_modes')) {
    module_enable(array('gsb_feature_view_modes'));
  }
}

/**
 * Enable new day month and year date format.
 */
function gsb_public_update_7251() {
  db_insert('date_format_type')
    ->fields(array('type' => 'day_month_and_year', 'title' => 'Day Month and Year', 'locked' => 0))
    ->execute();
  variable_set('date_format_day_month_and_year', 'd M Y');
}

/**
 * Fixes filename used by views_autocomplete module.
 */
function gsb_public_update_7252() {
  db_query("UPDATE {registry} SET filename = 'profiles/gsb_public/modules/contrib/views_autocomplete_filters/views/handlers/views_autocomplete_filters_handler_filter_string.inc' WHERE name = 'views_autocomplete_filters_handler_filter_string'");
  cache_clear_all();
}

/**
 * Disable and uninstall gsb_feature_google_analytics_settings module.
 */
function gsb_public_update_7253() {
  module_disable(array('gsb_feature_google_analytics_settings'));
  drupal_uninstall_modules(array('gsb_feature_google_analytics_settings'));
}

/**
 * Enable gsb_content_pane_info module.
 */
function gsb_public_update_7254() {
  if (!module_exists('gsb_content_pane_info')) {
    module_enable(array('gsb_content_pane_info'));
  }
}

/**
 * Enable tzfield module.
 */
function gsb_public_update_7255() {
  if (!module_exists('tzfield')) {
    module_enable(array('tzfield'));
  }
}

/**
 * Enable gsb_feature_admission_event_ct module.
 */
function gsb_public_update_7256() {
  if (!module_exists('gsb_feature_admission_event_ct')) {
    module_enable(array('gsb_feature_admission_event_ct'));
  }
}

/**
 * Enable gsb_feature_event_shared module.
 */
function gsb_public_update_7257() {
  if (!module_exists('gsb_feature_event_shared')) {
    module_enable(array('gsb_feature_event_shared'));
  }
}

/**
 * Enable gsb_feature_admission_event_display module.
 */
function gsb_public_update_7258() {
  if (!module_exists('gsb_feature_admission_event_display')) {
    module_enable(array('gsb_feature_admission_event_display'));
  }
}

/**
 * Enable gsb_cvent module.
 */
function gsb_public_update_7259() {
  if (!module_exists('gsb_cvent')) {
    module_enable(array('gsb_cvent'));
  }
}

/**
 * Update adminstrator user permissions for cvent
 */
function gsb_public_update_7260() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');
  // Add the permission
  $adminstrator_user_permissions = array(
    'administer cvent',
  );
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Remove field instances from event
 */
function gsb_public_update_7261() {
  $delete_instance = array(
    'field_academic_area_unlimited',
    'field_event_category',
    'field_address',
    'field_event_series',
    'field_department',
    'field_person_fac_other',
    'field_link_map',
    'field_region'
  );
  foreach($delete_instance as $field_name) {
    // Get Field Instance
    $instance = field_info_instance('node', $field_name, 'event');
    if (!$instance) {
      continue;
    }
    // Mark field for deletion.
    field_delete_instance($instance);
    // Remove field marked for deletion.
    field_purge_batch(10);
  }
  $delete_group_instance = array(
    'group_target_audience',
    'group_department',
    'group_event_series',
    'group_event_category',
    'group_tags',
    'group_region',
    'group_academic_area',
    'group_taxonomy',
    'group_event_image',
    'group_location'
  );
  foreach($delete_group_instance as $group_name) {
    if ($group = field_group_load_field_group($group_name, 'node', 'event', 'form')) {
      ctools_include('export');
      field_group_group_export_delete($group, FALSE);
    }
  }
}

/**
 * Save terms to Timezone taxonomy.
 */
function gsb_public_update_7262() {

  // Revert taxonomy feature to create timezone vocab
  features_revert_module('gsb_feature_taxonomy');

  $timezone_vocab = taxonomy_vocabulary_machine_name_load('timezone');

  $terms = array(
    'Africa/Addis_Ababa' => 'Arab Time',
    'Africa/Algiers' => 'W. Central Africa Time',
    'Africa/Cairo' => 'Egypt Time',
    'Africa/Dar_es_Salaam' => 'E. Africa Time',
    'Africa/Johannesburg' => 'South Africa Time',
    'Africa/Tripoli' => 'GTB Time',
    'America/Adak' => 'Alaska Time',
    'America/Anchorage' => 'Pacific Time',
    'America/Argentina/Buenos_Aires' => 'SA Eastern Time',
    'America/Boise' => 'Central Time',
    'America/Caracas' => 'Venezuela Standard Time',
    'America/Curacao' => 'Pacific SA Time',
    'America/Guatemala' => 'Central America Time',
    'America/Halifax' => 'Greenland Time',
    'America/Indiana/Knox' => 'US Eastern Time',
    'America/La_Paz' => 'SA Western Time',
    'America/Lima' => 'SA Pacific Time',
    'America/Mazatlan' => 'Mexico Time',
    'America/Noronha' => 'Mid-Atlantic Time',
    'America/Phoenix' => 'Arizona Time',
    'America/Regina' => 'Canada Central Time',
    'America/Sao_Paulo' => 'E. South America Time',
    'America/St_Johns' => 'Newfoundland Time',
    'America/Toronto' => 'Atlantic Time',
    'America/Vancouver' => 'Mountain Time',
    'America/Winnipeg' => 'Eastern Time',
    'Asia/Almaty' => 'Central Asia Time',
    'Asia/Baku' => 'West Asia Time',
    'Asia/Bangkok' => 'SE Asia Time',
    'Asia/Bishkek' => 'N. Central Asia Time',
    'Asia/Brunei' => 'Malay Peninsula Time',
    'Asia/Colombo' => 'Sri Lanka Time',
    'Asia/Dubai' => 'Arabian Time',
    'Asia/Hong_Kong' => 'China Time',
    'Asia/Jerusalem' => 'Jerusalem Time',
    'Asia/Kabul' => 'Afghanistan Time',
    'Asia/Kathmandu' => 'Nepal Time',
    'Asia/Kolkata' => 'India Time',
    'Asia/Krasnoyarsk' => 'North Asia Time',
    'Asia/Kuwait' => 'Arabic Time',
    'Asia/Rangoon' => 'Myanmar Time',
    'Asia/Seoul' => 'Korea Time',
    'Asia/Shanghai' => 'North Asia East Time',
    'Asia/Taipei' => 'Taipei Time',
    'Asia/Tbilisi' => 'Caucasus Time',
    'Asia/Tehran' => 'Iran Time',
    'Asia/Tokyo' => 'Tokyo Time',
    'Asia/Vladivostok' => 'Vladivostok Time',
    'Asia/Yakutsk' => 'Yakutsk Time',
    'Asia/Yekaterinburg' => 'Ekaterinburg Time',
    'Atlantic/Cape_Verde' => 'Azores Time',
    'Atlantic/Cape_Verde' => 'Cape Verde Time',
    'Australia/Adelaide' => 'Cen. Australia Time',
    'Australia/Brisbane' => 'AUS Eastern Time',
    'Europe/London' => 'Romance Time',
    'Australia/Darwin' => 'AUS Central Time',
    'Australia/Hobart' => 'Tasmanian Time',
    'Australia/Perth' => 'W. Australia Time',
    'Europe/London' => 'Central Europe Time',
    'Australia/Sydney' => 'E. Australia Time',
    'Europe/London' => 'W. Europe Time',
    'Europe/Moscow' => 'Russian Time',
    'Europe/Oslo' => 'FLE Time',
    'Europe/Prague' => 'E. Europe Time',
    'Pacific/Apia' => 'Tonga Time',
    'Pacific/Auckland' => 'New Zealand Time',
    'UTC' => 'GMT Time',
    'Pacific/Fiji' => 'Fiji Islands Time',
    'Pacific/Guadalcanal' => 'Central Pacific Time',
    'Pacific/Guam' => 'West Pacific Time',
    'Pacific/Honolulu' => 'Hawaiian Time',
    'Pacific/Pago_Pago' => 'Samoa Time',
    'UTC' => 'Greenwich Time',
    'America/Anchorage' => 'Eastern Time Zone',
    'America/Tijuana' => 'Mexico2 Time',
  );

  foreach ($terms as $drupal_term => $cvent_term) {
    $newterm = new stdClass();
    $newterm->name = $cvent_term; // The name of the term
    $newterm->vid = $timezone_vocab->vid; // The ID of the parent vocabulary
    $newterm->parent = 0; // This tells taxonomy that this is a top-level term
    $newterm->field_drupal_timezone[LANGUAGE_NONE][0]['value'] = $drupal_term;
    taxonomy_term_save($newterm);
  }
}

/**
 * Remove field instances from event
 */
function gsb_public_update_7263() {
  $delete_instance = array(
    'field_event_category',
  );
  foreach($delete_instance as $field_name) {
    // Get Field Instance
    $instance = field_info_instance('node', $field_name, 'academic_calendar_event');
    if (!$instance) {
      continue;
    }
    // Mark field for deletion.
    field_delete_instance($instance);
    // Remove field marked for deletion.
    field_purge_batch(10);
  }
}

/**
 * Disable modules: gsb_addthis_customization, addthis, and addthis_display
 */
function gsb_public_update_7264() {
  module_disable(array('gsb_addthis_customization'));
  drupal_uninstall_modules(array('gsb_addthis_customization'));
  module_disable(array('addthis'));
  drupal_uninstall_modules(array('addthis'));
  module_disable(array('addthis_displays'));
  drupal_uninstall_modules(array('addthis_displays'));
}

/**
 * Disable the date_ical module
 */
function gsb_public_update_7265() {
  module_disable(array('date_ical'));
  drupal_uninstall_modules(array('date_ical'));
}

/**
 * Enable gsb_public_custom_metatags module.
 */
function gsb_public_update_7266() {
  if (!module_exists('gsb_public_custom_metatags')) {
    module_enable(array('gsb_public_custom_metatags'));
  }
}

/**
 * Enable gsb_filtered_view_link module.
 */
function gsb_public_update_7267() {
  if (!module_exists('gsb_filtered_view_link')) {
    module_enable(array('gsb_filtered_view_link'));
  }
}

/**
 * Enable gsb_url_shortener module.
 */
function gsb_public_update_7268() {
  if (!module_exists('gsb_url_shortener')) {
    module_enable(array('gsb_url_shortener'));
  }
}

/**
 * Enable gsb_entity_reference_delete_warning module.
 */
function gsb_public_update_7269() {
  if (!module_exists('gsb_entity_reference_delete_warning')) {
    module_enable(array('gsb_entity_reference_delete_warning'));
  }
}

/**
 * Import the CES redirects.
 */
function gsb_public_update_7270(){
  $filename = 'CES Redirects.csv';
  $file_path = 'profiles/gsb_public/imports/'.$filename;
  $row = 1;
  if (($handle = fopen($file_path, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $row++;
      if ($row > 2) {  // Excluded title row from csv
        $source_url = $data[0];
        $redirect_url = $data[1];
        if ($source_url != "" && $redirect_url != "") {
          $redirect = array('source' => $source_url, 'redirect' => $redirect_url);
          $redirect_object = new stdClass();
          redirect_object_prepare($redirect_object, $redirect);
          // Check if the redirect exists before saving.
          if (!redirect_load_by_source($source_url)) {
            redirect_save($redirect_object);
          }
        }
      }
    }
    fclose($handle);
  }
  else {
    watchdog('gsb_public','Error in reading File');
  }
}

/**
 * Import the CSI redirects.
 */
function gsb_public_update_7271(){
  $filename = 'Data-Table 1.csv';
  $file_path = 'profiles/gsb_public/imports/'.$filename;
  $row = 1;
  if (($handle = fopen($file_path, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $row++;
      if ($row > 2) {  // Excluded title row from csv
        $source_url = $data[0];
        $redirect_url = $data[1];

        if ($source_url != "" && $redirect_url != "") {
          $redirect = array('source' => $source_url, 'redirect' => $redirect_url);
          $redirect_object = new stdClass();
          redirect_object_prepare($redirect_object, $redirect);
          // Check if the redirect exists before saving.
          if (!redirect_load_by_source($source_url)) {
            try {
              redirect_save($redirect_object);
            }
            catch (Exception $e) {
              watchdog('gsb_public', 'Error adding redirect for ' . $source_url);
            }
          }
        }
      }
    }
    fclose($handle);
  }
  else {
    watchdog('gsb_public','Error in reading File');
  }
}

/**
 * Enable gsb_feature_all_research_display module.
 */
function gsb_public_update_7272() {
  if (!module_exists('gsb_feature_all_research_display')) {
    module_enable(array('gsb_feature_all_research_display'));
  }
}

/**
 * Update to fix the URL after CSI import.
 */
function gsb_public_update_7273() {
  db_query("UPDATE {redirect} SET redirect = 'http://www.ssireview.org' WHERE redirect = 'ssireview.org'");
}

/**
 * Update adminstrator user permissions for 'administer shortened urls'
 */
function gsb_public_update_7274() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');
  // Add the permission
  $adminstrator_user_permissions = array(
    'administer shortened urls',
  );
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Import the Alumni redirects.
 */
function gsb_public_update_7275(){
  $filename = 'P5 Content Tracker - Final Alumni Redirects.csv';
  $file_path = 'profiles/gsb_public/imports/'.$filename;
  $row = 1;
  if (($handle = fopen($file_path, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $row++;
      if ($row > 2) {  // Excluded title row from csv
        $source_url = $data[0];
        $redirect_url = $data[1];

        if ($source_url != "" && $redirect_url != "") {
          $redirect = array('source' => $source_url, 'redirect' => $redirect_url);
          $redirect_object = new stdClass();
          redirect_object_prepare($redirect_object, $redirect);
          // Check if the redirect exists before saving.
          if (!redirect_load_by_source($source_url)) {
            try {
              redirect_save($redirect_object);
            }
            catch (Exception $e) {
              watchdog('gsb_public', 'Error adding redirect for ' . $source_url);
            }
          }
        }
      }
    }
    fclose($handle);
  }
  else {
    watchdog('gsb_public','Error in reading File');
  }
}

/**
 * Update script to remove descipline and event series vocab
 */
function gsb_public_update_7276() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('discipline');
  // Delete from database.
  taxonomy_vocabulary_delete($vocabulary->vid);

  $vocabulary = taxonomy_vocabulary_machine_name_load('event_series');
  // Delete from database.
  taxonomy_vocabulary_delete($vocabulary->vid);
}

/**
 * Delete the machine name for nodes.
 */
function gsb_public_update_7277() {
  $nids = array(376771, 376741);
  db_delete('defaultcontent')
    ->condition('nid', $nids, 'IN')
    ->execute();
}

/**
 * Disable the webform_addmore module
 */
function gsb_public_update_7278() {
  module_disable(array('webform_addmore'));
  drupal_uninstall_modules(array('webform_addmore'));
}

/**
 * Enable gsb_feature_videos_fpp and video_embed_field modules.
 */
function gsb_public_update_7279() {
  if (!module_exists('video_embed_field')) {
    module_enable(array('video_embed_field'));
  }
  if (!module_exists('gsb_feature_videos_fpp')) {
    module_enable(array('gsb_feature_videos_fpp'));
  }
}

/**
 * Enable gsb_filter_with_states module.
 */
function gsb_public_update_7280() {
  if (!module_exists('gsb_filter_with_states')) {
    module_enable(array('gsb_filter_with_states'));
  }
}

/**
 * Enable expire_panels module.
 */
function gsb_public_update_7281() {
  if (!module_exists('expire_panels')) {
    module_enable(array('expire_panels'));
  }
}

/**
 * Set configuration properties for expire_panels module.
 */
function gsb_public_update_7282() {
  if (module_exists('expire_panels')) {
    module_load_include('module', 'expire_panels');
    
    variable_set('expire_panels_front_page', TRUE);
    variable_set('expire_panels_actions', array(EXPIRE_PANELS_DISPLAY_UPDATE, EXPIRE_PANELS_DISPLAY_DELETE));
    variable_set('expire_panels_panel_page', TRUE);
    variable_set('expire_panels_panelizer_page', TRUE);
  }
}

/**
 * Delete field instance 'field_year' from the Case content type.
 */
function gsb_public_update_7283() {
  $entity_type = 'node';
  $bundle = 'case';
  $field_name = 'field_year';
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  field_delete_instance($instance);
  field_purge_batch(10);
}

/**
 * Delete Chute fpp contents.
 */
function gsb_public_update_7284() {
  $fpids = db_select('fieldable_panels_panes', 'fpp')
    ->fields('fpp', array('fpid'))
    ->condition('fpp.bundle', 'Chute')
    ->execute();

  foreach ($fpids as $fpid) {
    fieldable_panels_panes_delete($fpid->fpid);
  }
}

/**
 * Disable and uninstall the gsb_feature_chute_fpp module
 */
function gsb_public_update_7285() {
  module_disable(array('gsb_feature_chute_fpp'));
  drupal_uninstall_modules(array('gsb_feature_chute_fpp'));

  // Clear ctools cache after removing commencement plugin
  ctools_flush_caches();
}

/**
 * Enable image_link_formatter module.
 */
function gsb_public_update_7286() {
  if (!module_exists('image_link_formatter')) {
    module_enable(array('image_link_formatter'));
  }
}

/**
 * Disable shield module.
 */
function gsb_public_update_7287() {
  module_disable(array('shield'));
  drupal_uninstall_modules(array('shield'));
}

/**
 * Update the faculty Senior Associate Dean field.
 */
function gsb_public_update_7288() {
  $entity_type = 'node';

  // Get list of all faculty nodes
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'faculty');

  $entities = $query->execute();

  // Loop through all faculty nodes
  foreach ($entities[$entity_type] as $entity) {
    $node = node_load($entity->nid);
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_sad->set('no');
    $wrapper->save();
  }
}

/**
 * Import the Faculty new fields data.
 */
function gsb_public_update_7289(){
  $filename = 'Faculty Titles.csv';
  $file_path = 'profiles/gsb_public/imports/'.$filename;
  $row = 0;
  if (($handle = fopen($file_path, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $row++;
      if ($row > 1) {  // Excluded title row from csv
        $nid = $data[1];
        $field_title_appointment = $data[3];
        $field_sad = $data[4];
        $field_joint_appointment = $data[5];
        $field_other_titles = $data[6];
        $field_faculty_director_positions = $data[7];

        $node = node_load($nid);
        $wrapper = entity_metadata_wrapper('node', $node);
        $wrapper->field_title_appointment->set($field_title_appointment);

        if (!empty($field_sad)) {
          $wrapper->field_sad->set(strtolower($field_sad));
        }

        if (!empty($field_joint_appointment)) {
          $joint_appointment_values = explode('|', $field_joint_appointment);
          foreach ($joint_appointment_values as $key => $value) {
            $wrapper->field_joint_appointment->offsetSet($key, trim($value));
          }
        }

        if (!empty($field_other_titles)) {
          $other_titles_values = explode('|', $field_other_titles);
          foreach ($other_titles_values as $key => $value) {
            $wrapper->field_other_titles->offsetSet($key, trim($value));
          }
        }

        if (!empty($field_faculty_director_positions)) {
          $faculty_director_positions_values = explode('|', $field_faculty_director_positions);
          foreach ($faculty_director_positions_values as $key => $value) {
            $wrapper->field_faculty_director_positions->offsetSet($key, trim($value));
          }
        }
        try {
          $wrapper->save();
        }
        catch(Exception $e) {
          watchdog('gsb_public', 'Error while saving faculty node '. $nid, $e->getMessage());
        }
      }
    }
    fclose($handle);
  }
  else {
    watchdog('gsb_public','Error in reading File');
  }
}

/**
 * Enable gsb_feature_program_instance_ct and gsb_feature_program_ct modules.
 */
function gsb_public_update_7290() {
  if (!module_exists('gsb_feature_program_ct')) {
    module_enable(array('gsb_feature_program_ct'));
  }
  if (!module_exists('gsb_feature_program_instance_ct')) {
    module_enable(array('gsb_feature_program_instance_ct'));
  }
}

/**
 * Webform disable Reply to header
 */
function gsb_public_update_7291(){
  variable_set('webform_email_replyto', 0);
}

/**
 * Enable gsb_public_statistics module.
 */
function gsb_public_update_7292() {
  if (!module_exists('gsb_public_statistics')) {
    module_enable(array('gsb_public_statistics'));
  }
}

/**
 * Enable multiple_fields_remove_button module.
 */
function gsb_public_update_7293() {
  if (!module_exists('multiple_fields_remove_button')) {
    module_enable(array('multiple_fields_remove_button'));
  }
}

/**
 * Enable mailsystem and mimemail module.
 */
function gsb_public_update_7294() {
  if (!module_exists('mailsystem')) {
    module_enable(array('mailsystem'));
  }
  if (!module_exists('mimemail')) {
    module_enable(array('mimemail'));
  }
}

/**
 * Enable gsb_program_finder module.
 */
function gsb_public_update_7295() {
  if (!module_exists('gsb_program_finder')) {
    module_enable(array('gsb_program_finder'));
  }
}

/**
 * Enable webform_to_gdocs module.
 */
function gsb_public_update_7296() {
  if (!module_exists('webform_to_gdocs')) {
    module_enable(array('webform_to_gdocs'));
  }
}

/**
 * Update adminstrator user permissions for 'webform to gdocs'
 */
function gsb_public_update_7297() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');
  // Add the permission
  $adminstrator_user_permissions = array(
    'administer webform to gdocs',
    'attach webform to gdocs',
  );
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Enable isotopify module.
 */
function gsb_public_update_7298() {
  if (!module_exists('isotopify')) {
    module_enable(array('isotopify'));
  }
}

/**
 * Enable gsb_feature_program_instance_display module.
 */
function gsb_public_update_7299() {
  if (!module_exists('gsb_feature_program_instance_display')) {
    module_enable(array('gsb_feature_program_instance_display'));
  }
}

/**
 * Enable gsb_feature_ee_megamenu module.
 */
function gsb_public_update_7300() {
  if (!module_exists('gsb_feature_ee_megamenu')) {
    module_enable(array('gsb_feature_ee_megamenu'));
  }
}

/**
 * Enable gsb_feature_program_panelized_page_ct module.
 */
function gsb_public_update_7301() {
  if (!module_exists('gsb_feature_program_panelized_page_ct')) {
    module_enable(array('gsb_feature_program_panelized_page_ct'));
  }
}

/**
 * Enable views_flipped_table module.
 */
function gsb_public_update_7302() {
  if (!module_exists('views_flipped_table')) {
    module_enable(array('views_flipped_table'));
  }
}

/**
 * Disable the gsb_program_finder module
 */
function gsb_public_update_7303() {
  module_disable(array('gsb_program_finder'));
  drupal_uninstall_modules(array('gsb_program_finder'));
}

/**
 * Enable gsb_feature_program_finder_display module.
 */
function gsb_public_update_7304() {
  if (!module_exists('gsb_feature_program_finder_display')) {
    module_enable(array('gsb_feature_program_finder_display'));
  }
}

/**
 * Enable gsb_feature_program_display module.
 */
function gsb_public_update_7305() {
  if (!module_exists('gsb_feature_program_display')) {
    module_enable(array('gsb_feature_program_display'));
  }
}

/**
 * Delete field_is_program_online field instance from Program Instance CT
 */
function gsb_public_update_7306() {
  $field_names = array(
    'field_is_program_online',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program_instance');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Enable gsb_feature_featured_program_fpp module.
 */
function gsb_public_update_7307() {
  if (!module_exists('gsb_feature_featured_program_fpp')) {
    module_enable(array('gsb_feature_featured_program_fpp')); 
  }
}

/**
 * Delete field_program_small_teams field instance from Program CT
 */
function gsb_public_update_7308() {
  $field_names = array(
    'field_program_small_teams',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_pathauto_title_alias field instance from Program CT
 */
function gsb_public_update_7309() {
  $field_names = array(
    'field_pathauto_title_alias',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_link_for_apply_button field instance from Program Instance CT
 */
function gsb_public_update_7310() {
  $field_names = array(
    'field_link_for_apply_button',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program_instance');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_application_open and field_financial_assist_statement field instances from Program CT
 */
function gsb_public_update_7311() {
  $field_names = array(
    'field_application_open',
    'field_financial_assist_statement',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_location field instance from field_program_location field collection.
 */
function gsb_public_update_7312() {
  $field_names = array(
    'field_location',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_program_location');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_person_ref field instance from field_faculty_directors, field_faculty_1, field_faculty_2, and field_guest_speakers_advisors_fc field collections.
 */
function gsb_public_update_7313() {
  $field_names = array(
    'field_person_ref',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_faculty_directors');
    field_delete_instance($instance);
  }
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_faculty_1');
    field_delete_instance($instance);
  }
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_faculty_2');
    field_delete_instance($instance);
  }
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_guest_speakers_advisors_fc');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_overview_teaser and field_key_benefits_teaser field instances from program node.
 */
function gsb_public_update_7314() {
  $field_names = array(
    'field_overview_teaser',
    'field_key_benefits_teaser',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete field_description field instances from field_faculty_1, field_faculty_2 and field_guest_speakers_advisors_fc.
 */
function gsb_public_update_7315() {
  $field_names = array(
    'field_description',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_faculty_1');
    field_delete_instance($instance);
  }
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_faculty_2');
    field_delete_instance($instance);
  }
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('field_collection_item', $field_name, 'field_guest_speakers_advisors_fc');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Updates related to node clone module
 */
function gsb_public_update_7316() {

  if (!module_exists('node_clone')) {
    module_enable(array('node_clone')); 
  }

  if (!module_exists('node_clone_tab')) {
    module_enable(array('node_clone_tab')); 
  }

  variable_set('clone_reset_program_instance', 1);

  // Get the marketing admin user role
  $marketing_admin_user = user_role_load_by_name('marketing_admin');

  $marketing_admin_user_permissions = array(
    'clone node',
    'clone own nodes',
  );

  // Update authenticated user role permissions
  user_role_grant_permissions($marketing_admin_user->rid, $marketing_admin_user_permissions);
  
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');  

  $adminstrator_user_permissions = array(
    'clone node',
    'clone own nodes',
  );

  // Update authenticated user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
  
}

/**
 * Update removes all key_program_topics currently defined
 */
function gsb_public_update_7317() {
  $result = db_truncate('field_data_field_key_program_topics')->execute();
  $result = db_truncate('field_revision_field_key_program_topics')->execute();
}

/**
 * Enable gsb_text_equivalent module.
 */
function gsb_public_update_7318() {
  if (!module_exists('gsb_text_equivalent')) {
    module_enable(array('gsb_text_equivalent'));
  }
}

/**
 * Delete the field instances field_prequalification_url and field_link_apply_button from program_instance.
 */
function gsb_public_update_7319() {
  $field_names = array(
    'field_prequalification_url',
    'field_link_apply_button'
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program_instance');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete the field instances field_app_requirements_intro from program.
 */
function gsb_public_update_7320() {
  $field_names = array(
    'field_app_requirements_intro'
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Delete the field instances field_additional_page_prefix from program.
 */
function gsb_public_update_7321() {
  $field_names = array(
    'field_additional_page_prefix'
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Reset the layout from gsb-widescreen to gsb-full-bleed-page for all
 * program_panelized_page content
 */
function gsb_public_update_7322() {

  $query = db_select('node', 'n');
  $query->fields('n', array('type', 'nid'));
  $query->join('panelizer_entity', 'pe', "n.nid = pe.entity_id");
  $query->fields('pe', array('entity_id', 'did'));
  $query->join('panels_display', 'pd', "pe.did = pd.did");
  $query->fields('pd', array('layout', 'did'));
  $query->condition('n.type', 'program_panelized_page');
  $query->condition('pd.layout', 'gsb-widescreen');
  $results = $query->execute();

  foreach ($results as $ppp) {
    db_update('panels_display')
      ->fields(array(
        'layout' => 'gsb-full-bleed-page',
      ))
      ->condition('panels_display.did', $ppp->did)
      ->execute();
  }
}

/**
 * Reset the path alias for all program_panelized_page content
 */
function gsb_public_update_7323() {

  $query = db_select('node', 'n');
  $query->fields('n', array('type', 'nid'));
  $query->condition('n.type', 'program_panelized_page');
  $results = $query->execute();

  $nids = array();
  foreach($results as $ppp) {
    $nids[] = $ppp->nid;
  }
  $nodes = node_load_multiple($nids);

  foreach($nodes as $node) {
    $program_node = node_load($node->field_program['und'][0]['target_id']);
    if ($program_node == null) {
      continue;
    }
    $ppp_type = '';
    if (strpos($node->title, '--- curriculum') !== FALSE) {
      $ppp_type = 'curriculum';
    }
    else if (strpos($node->title, '--- faculty') !== FALSE) {
      $ppp_type = 'faculty';
    }
    else if (strpos($node->title, '--- participant') !== FALSE) {
      $ppp_type = 'participant';
    }
    if ($ppp_type == '') {
      continue;
    }
    $path = _gsb_feature_program_ct_create_ppp_path($program_node, $ppp_type);
    $node->path = array(
      'alias' => $path,
      'pathauto' => 0
    );
    node_save($node);
  }
}

/**
 * Resetting the url aliases for ppp participant to participant-profile
 */
function gsb_public_update_7324() {
  $query = db_select('url_alias', 'ua');
  $query->fields('ua', array('alias', 'pid'));
  $query->condition('ua.alias', '%exec-ed%/participant', 'LIKE');
  $results = $query->execute();
  foreach($results as $alias) {
    db_update('url_alias')
    ->fields(array(
      'alias' => $alias->alias . '-profile',
      'pid' => $alias->pid
    ))
    ->condition('url_alias.pid', $alias->pid, '=')
    ->execute();
  }
}

/**
 * Resetting all Program CT to have force_pathauto checked
 */
function gsb_public_update_7325() {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->join('submenu_alias_pathauto', 'sap', "n.nid = sap.nid");
  $query->fields('sap', array('nid', 'force_pathauto'));
  $query->condition('n.type', 'program');
  $results = $query->execute();
  
  foreach($results as $spa) {
    db_update('submenu_alias_pathauto')
    ->fields(array(
      'nid' => $spa->nid,
      'force_pathauto' => 1
    ))
    ->condition('submenu_alias_pathauto.nid', $spa->nid, '=')
    ->execute();
  }
}

/**
 * Update adminstrator user permissions for create/edit/delete of Program Instance content
 */
function gsb_public_update_7326() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');
  // Add the permission
  $adminstrator_user_permissions = array(
    'create program_instance content',
    'edit own program_instance content',
    'edit any program_instance content',
    'delete own program_instance content',
    'delete any program_instance content'
  );
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Update adminstrator user permissions for create/edit/delete of Program content
 */
function gsb_public_update_7327() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');
  // Add the permission
  $adminstrator_user_permissions = array(
    'create program content',
    'edit own program content',
    'edit any program content',
    'delete own program content',
    'delete any program content'
  );
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Enable gsb_public_brochure_list module.
 */
function gsb_public_update_7328() {
  if (!module_exists('gsb_public_brochure_list')) {
    module_enable(array('gsb_public_brochure_list'));
  }
}

/**
 * Enable gsb_custom_breadcrumbs module.
 */
function gsb_public_update_7329() {
  if (!module_exists('gsb_custom_breadcrumbs')) {
    module_enable(array('gsb_custom_breadcrumbs'));
  }
}

/**
 * Enable gsb_feature_programs_list_fpp module.
 */
function gsb_public_update_7330() {
  if (!module_exists('gsb_feature_programs_list_fpp')) {
    module_enable(array('gsb_feature_programs_list_fpp'));
  }
}

/**
 * Enable extended_block_visibility module.
 */
function gsb_public_update_7331() {
  if (!module_exists('extended_block_visibility')) {
    module_enable(array('extended_block_visibility'));
  }
}

/**
 * Enable gsb_feature_program_app_finder module.
 */
function gsb_public_update_7332() {
  if (!module_exists('gsb_feature_program_app_finder')) {
    module_enable(array('gsb_feature_program_app_finder'));
  }
}

/**
 * Disable extended_block_visibility module.
 */
function gsb_public_update_7333() {
  if (module_exists('extended_block_visibility')) {
    module_disable(array('extended_block_visibility'));
  }
}

/**
 * Enable stackla, composer_manager and encrypt modules.
 */
function gsb_public_update_7334() {
  if (!module_exists('stackla')) {
    module_enable(array('stackla'));
  }
  if (!module_exists('composer_manager')) {
    module_enable(array('composer_manager'));
  }
  if (!module_exists('encrypt')) {
    module_enable(array('encrypt'));
  }
}

/**
 * Enable gsb_feature_quote_fpp module.
 */
function gsb_public_update_7335() {
  if (module_exists('gsb_feature_quote_fpp')) {
    module_enable(array('gsb_feature_quote_fpp'));
  }
}

/**
 * Delete Quote fpp contents.
 */
function gsb_public_update_7336() {
  $fpids = db_select('fieldable_panels_panes', 'fpp')
    ->fields('fpp', array('fpid'))
    ->condition('fpp.bundle', 'Quote')
    ->execute();

  foreach ($fpids as $fpid) {
    fieldable_panels_panes_delete($fpid->fpid);
  }
}

/**
 * Delete the field instances field_link_single from Quote.
 */
function gsb_public_update_7337() {
  $field_names = array(
    'field_link_single'
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('fieldable_panels_pane', $field_name, 'quote');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Make enty in fieldable_panels_pane_type table for Quote(Workaround).
 */
function gsb_public_update_7338() {
  $fields = array(
    'name' => 'quote',
    'title' => 'Quote',
    'description' => '',
  );
  db_insert('fieldable_panels_pane_type')
    ->fields($fields)
    ->execute();
}

/**
 * Enable gsb_feature_quotes_fpp module.
 */
function gsb_public_update_7339() {
  if (!module_exists('gsb_feature_quotes_fpp')) {
    module_enable(array('gsb_feature_quotes_fpp'));
  }
}

/**
 * Disable and uninstall gsb_feature_quote_fpp module.
 */
function gsb_public_update_7340() {
  if (module_exists('gsb_feature_quote_fpp')) {
    module_disable(array('gsb_feature_quote_fpp'));
    drupal_uninstall_modules(array('gsb_feature_quote_fpp'));
  }
}

/**
 * Disable stackla, composer_manager and encrypt modules.
 */
function gsb_public_update_7341() {
  if (module_exists('stackla')) {
    module_disable(array('stackla'));
  }
  if (module_exists('composer_manager')) {
    module_disable(array('composer_manager'));
  }
  if (module_exists('encrypt')) {
    module_disable(array('encrypt'));
  }
}

/**
 * Enable the FPP revision locking feature.
 */
function gsb_public_update_7342() {
  variable_set('fpp_revision_locking', 'lock');
}

/**
 * Rerun Fieldable Panels Panes update 7112.
 */
function gsb_public_update_7343(&$sandbox) {
  return fieldable_panels_panes_update_7112($sandbox);
}

/**
 * Create the metatag config settings for:
 * book, case, working_paper and publication
 */
function gsb_public_update_7344() {

  // book
  $config = array(
    'cid' => '',
    'instance' => 'node:book',
    'config' => array(
      'gsb:dimension9' => array(
        'value' => '[node:gtm-centers-research-programs]'
      ),
      'gsb:dimension10' => array(
        'value' => '[node:field_publication_type]'
      ),
      'gsb:dimension11' => array(
        'value' => '[node:gtm-circle-topics]'
      ),
      'gsb:dimension12' => array(
        'value' => '[node:gtm-author-name]'
      ),
    )
  );
  $config = (object) $config;
  metatag_config_save($config);

  // case
  $config = array(
    'cid' => '',
    'instance' => 'node:case',
    'config' => array(
      'gsb:dimension9' => array(
        'value' => '[node:gtm-centers-research-programs]'
      ),
      'gsb:dimension10' => array(
        'value' => '[node:field_publication_type]'
      ),
      'gsb:dimension11' => array(
        'value' => '[node:gtm-circle-topics]'
      ),
      'gsb:dimension12' => array(
        'value' => '[node:gtm-author-name]'
      ),
    )
  );
  $config = (object) $config;
  metatag_config_save($config);

  // working_paper
  $config = array(
    'cid' => '',
    'instance' => 'node:working_paper',
    'config' => array(
      'gsb:dimension9' => array(
        'value' => '[node:gtm-centers-research-programs]'
      ),
      'gsb:dimension10' => array(
        'value' => '[node:field_publication_type]'
      ),
      'gsb:dimension11' => array(
        'value' => '[node:gtm-circle-topics]'
      ),
      'gsb:dimension12' => array(
        'value' => '[node:gtm-author-name]'
      ),
    )
  );
  $config = (object) $config;
  metatag_config_save($config);

  // publication
  $config = array(
    'cid' => '',
    'instance' => 'node:publication',
    'config' => array(
      'gsb:dimension9' => array(
        'value' => '[node:gtm-centers-research-programs]'
      ),
      'gsb:dimension10' => array(
        'value' => '[node:field_publication_type]'
      ),
      'gsb:dimension11' => array(
        'value' => '[node:gtm-circle-topics]'
      ),
      'gsb:dimension12' => array(
        'value' => '[node:gtm-author-name]'
      ),
    )
  );
  $config = (object) $config;
  metatag_config_save($config);
}

/**
 * Enable print, print_pdf, print_ui and print_pdf_wkhtmltopdf modules.
 */
function gsb_public_update_7345() {
  if (!module_exists('print')) {
    module_enable(array('print'));
  }
  if (!module_exists('print_pdf')) {
    module_enable(array('print_pdf'));
  }
  if (!module_exists('print_ui')) {
    module_enable(array('print_ui'));
  }
  if (!module_exists('print_pdf_wkhtmltopdf')) {
    module_enable(array('print_pdf_wkhtmltopdf'));
  }
}

/**
 * Update authenticated and anonymous user permissions for printing pdf
 */
function gsb_public_update_7346() {
  // Get the authenticated and anonymous user roles
  $authenticated_user = user_role_load_by_name('authenticated user');
  $anonymous_user = user_role_load_by_name('anonymous user');

  $pdf_permissions = array(
    'access PDF version',
  );

  // Update authenticated user role permissions
  user_role_grant_permissions($authenticated_user->rid, $pdf_permissions);

  // Update anonymous user role permissions
  user_role_grant_permissions($anonymous_user->rid, $pdf_permissions);
}

/**
 * Set config for print_pdf_wkhtmltopdf
 */
function gsb_public_update_7347() {
  variable_set('print_pdf_pdf_tool', 'print_pdf_wkhtmltopdf|profiles/gsb_public/modules/contrib/print/lib/wkhtmltopdf');
}

/**
 * Set config for print_pdf link_pos
 * - admin page for these values can be found at:
 *     /admin/config/user-interface/print/ui
 */
function gsb_public_update_7348() {
  variable_set('print_pdf_link_pos', 'a:4:{s:4:"link";i:0;s:6:"corner";i:0;s:5:"block";i:0;s:4:"help";i:0;}');
  variable_set('print_html_link_pos', 'a:4:{s:4:"link";i:0;s:6:"corner";i:0;s:5:"block";i:0;s:4:"help";i:0;}');
}

/**
 * Enable phpwkhtmltopdf module.
 */
function gsb_public_update_7349() {
  if (!module_exists('phpwkhtmltopdf')) {
    module_enable(array('phpwkhtmltopdf'));
  }
}

/**
 * Create the metatag config settings for:
 * program_panelized_page
 */
function gsb_public_update_7350() {
  $config = array(
    'cid' => '',
    'instance' => 'node:program_panelized_page',
    'config' => array(
      'title' => array(
        'value' => '[node:ppp-url-args] - [node:title] | [site:name]'
      )
    )
  );
  $config = (object) $config;
  metatag_config_save($config);
}

/**
 * Updating mail_system settings
 */
function gsb_public_update_7351() {
  $mail_system = array(
    'default-system' => 'MimeMailSystem',
    'mimemail' => 'MimeMailSystem',
    'gsb_public_statistics' => 'MimeMailSystem',
  );
  variable_set('mail_system', $mail_system);
}

/**
 * Update to remove field_title_position_unlimited
 */
function gsb_public_update_7352() {
  
  // remove field_title_position_unlimited
  $delete_instance = array(
    'field_title_position_unlimited',
  );
  
  foreach($delete_instance as $field_name) {
    // Get Field Instance
    $instance = field_info_instance('node', $field_name, 'faculty');
    if (!$instance) {
      continue;
    }
    // Mark field for deletion.
    field_delete_instance($instance);
    // Remove field marked for deletion.
    field_purge_batch(10);
  }
  
}

/**
 * Update to remove stackla  widget code
 */
function gsb_public_update_7353() {

  // Remove stackla  widget code
  $instance = field_info_instance('fieldable_panels_pane', 'field_widget_code', 'embed_stackla');
  
  // Mark field instance for deletion.
  field_delete_instance($instance);
  field_purge_batch(10);
  
  // Remove the field
  field_delete_field('field_widget_code');
  // Remove field marked for deletion.
  field_purge_batch(10);
}

/**
 * Enable tinypng_image_action module.
 */
function gsb_public_update_7354() {
  if (!module_exists('tinypng_image_action')) {
    module_enable(array('tinypng_image_action'));
  }
}

/**
 * Delete field instance field_image_key_image from Program CT
 */
function gsb_public_update_7355() {

  $field_names = array(
    'field_image_key_image',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }

  field_purge_batch(10);
}

/**
 * Delete field instance field_link_google_scholar from Faculty CT
 */
function gsb_public_update_7356() {

  $field_names = array(
    'field_link_google_scholar',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'faculty');
    field_delete_instance($instance);
  }

  field_purge_batch(10);
}

/**
 * Delete field instance field_region_of_interest from several CTs
 */
function gsb_public_update_7357() {

  $field_names = array(
    'field_region_of_interest',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'announcement');
    field_delete_instance($instance);
    $instance = field_info_instance('node', $field_name, 'book');
    field_delete_instance($instance);
    $instance = field_info_instance('node', $field_name, 'publication');
    field_delete_instance($instance);
    $instance = field_info_instance('node', $field_name, 'idea_story');
    field_delete_instance($instance);
    $instance = field_info_instance('node', $field_name, 'offsite_idea_story');
    field_delete_instance($instance);
    $instance = field_info_instance('node', $field_name, 'school_story');
    field_delete_instance($instance);
  }

  field_purge_batch(10);
}

/**
 * Delete field instance field_pr_contact_unlimited from School Story CT
 */
function gsb_public_update_7358() {

  $field_names = array(
    'field_pr_contact_unlimited',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'school_story');
    field_delete_instance($instance);
  }

  field_purge_batch(10);
}

/**
 * Enable xmlsitemap module.
 */
function gsb_public_update_7359() {
  if (!module_exists('xmlsitemap')) {
    module_enable(array('xmlsitemap'));
  }
}

/**
 * Delete the 'department' vocabulary.
 */
function gsb_public_update_7360() {
  $vocab = taxonomy_vocabulary_machine_name_load('department');
  taxonomy_vocabulary_delete($vocab->vid);
}

/**
 * Enable xmlsitemap sub-modules: xmlsitemap_engines, and xmlsitemap_node.
 */
function gsb_public_update_7361() {
  if (!module_exists('xmlsitemap_engines')) {
    module_enable(array('xmlsitemap_engines'));
  }
  if (!module_exists('xmlsitemap_node')) {
    module_enable(array('xmlsitemap_node'));
  }
}

/**
 * Update administrator role to have permission to admin xmlsitemap 
 */
function gsb_public_update_7362() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');

  // Add the permission
  $adminstrator_user_permissions = array(
    'administer xmlsitemap',
  );
  
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Update to add content type specific settings for xmlsitemap 
 */
function gsb_public_update_7363() {

  $settings = array(
    'status' => '1',
    'priority' => '0.5'
  );

  $names = array(
    'act',
    'admission_event',
    'alumni',
    'alumni_reunion_agenda_item',
    'alumni_reunion_group_page',
    'announcement',
    'book',
    'case',
    'event',
    'faculty',
    'idea_story',
    'publication',
    'msx_fellows',
    'page',
    'phd_candidate',
    'program',
    'program_panelized_page',
    'school_story',
    'staff',
    'webform',
    'week_in_the_life',
    'working_paper'
  );

  foreach ($names as $name) {
    $setting_name = 'xmlsitemap_settings_node_' . $name;
    variable_set($setting_name, $settings);  
  }
}

/**
 * Delete the region_interest taxonomy
 */
function gsb_public_update_7364() {
  $vocab = taxonomy_vocabulary_machine_name_load('region_interest');
  taxonomy_vocabulary_delete($vocab->vid);
}

/**
 * Update MSx Fellow content type related pages new path and menu links.
 */
function gsb_public_update_7365() {
  // Change MSx Fellow link in navigation.
  $link = menu_link_load(11306);
  $link['link_path'] = 'programs/msx/life/fellows';
  $link['router_path'] = 'programs/msx/life/fellows';
  menu_link_save($link);

  $old_path = 'programs/msx/academic-experience/fellows/';
  $new_path = 'programs/msx/life/fellows/';
  $match = '%' . $old_path . '%';
  $select = db_select('url_alias');
  $select->condition('alias', $match, 'LIKE');
  $results = $select->fields('url_alias')->execute();
  foreach ($results as $path) {
    // Replace old path with new path.
    $path->alias = str_replace($old_path, $new_path, $path->alias);
    $path = (array) $path;
    path_save($path);
  }
}

/**
 * Update to change path for MSx Listing page
 */
function gsb_public_update_7366() {
  db_update('page_manager_pages')
    ->fields(array('path' => 'programs/msx/life/fellows'))
    ->condition('name', 'msx_listing')
    ->execute();
}

/**
 * Update metatag config settings of page content type
 */
function gsb_public_update_7367() {
  $config = array(
    'cid' => '36',
    'instance' => 'node:page',
    'config' => array(
      'title' => array(
        'value' => '[node:title] | [site:name]'
      )
    )
  );
  $config = (object) $config;
  metatag_config_save($config);
}

/**
 * Enable kraken module
 */
function gsb_public_update_7368() {
  if (!module_exists('kraken')) {
    module_enable(array('kraken'));
  }
}

/**
 * Update metatag config settings of page content type
 */
function gsb_public_update_7369() {
  //fetching cid of page content type.
  $cid = db_select('metatag_config', 'mc')
    ->fields('mc', array('cid'))
    ->condition('instance', 'node:page', '=')
    ->execute()
    ->fetchField();
  //updating page content type config value
  if($cid != "") {
    $config = array(
      'cid' => $cid,
      'instance' => 'node:page',
      'config' => array(
        'title' => array(
          'value' => '[node:title] | [site:name]'
        )
      )
    );
    $config = (object) $config;
    metatag_config_save($config);
  }
}

/**
 * Delete the weather widget from closer look page
 */
function gsb_public_update_7370() {
  $display = panels_load_display(110971);
  unset($display->panels['mainbottom'][1]);
  panels_save_display($display);
}

/**
 * Delete the ranking content type and ranking content list
 */
function gsb_public_update_7371() {
  // Disable ranking display module
  module_disable(array('gsb_feature_ranking_display'));
  drupal_uninstall_modules(array('gsb_feature_ranking_display'));

  // Disable ranking ct module
  module_disable(array('gsb_feature_ranking_ct'));
  drupal_uninstall_modules(array('gsb_feature_ranking_ct'));
}  

/**
 * Delete the ranking content
 */
function gsb_public_update_7372() {

  // Delete the ranking content type
  $type = 'ranking';
  if (node_type_load($type)) {
    node_type_delete($type);
    variable_del('node_preview_' . $type);
  }

  node_types_rebuild();
  menu_rebuild();
}

/**
 * Enable captcha and image_captcha_refresh modules
 */
function gsb_public_update_7373() {
  if (!module_exists('captcha')) {
    module_enable(array('captcha'));
  }
  if (!module_exists('image_captcha_refresh')) {
    module_enable(array('image_captcha_refresh'));
  }
}

/**
  * Set jQuery version to 1.5 for admin pages
  */
 function gsb_public_update_7374() {
   variable_set('jquery_update_jquery_admin_version', '1.5');
 }
 
/**
 * Enable recaptcha module
 */
function gsb_public_update_7375() {
  if (!module_exists('recaptcha')) {
    module_enable(array('recaptcha'));
  }
}
 
/**
 * Switch Application state keys to numbers
 */
function gsb_public_update_7376() {
  db_query("UPDATE {field_data_field_application_state} SET field_application_state_value = '4' WHERE field_application_state_value = 'Closed'");
  db_query("UPDATE {field_data_field_application_state} SET field_application_state_value = '3' WHERE field_application_state_value = 'Not yet available'");
  db_query("UPDATE {field_data_field_application_state} SET field_application_state_value = '2' WHERE field_application_state_value = 'Open'");
  db_query("UPDATE {field_data_field_application_state} SET field_application_state_value = '1' WHERE field_application_state_value = 'Extended'");
}

/**
 * Enable GSB 12twenty module
 */
function gsb_public_update_7377() {
  if (!module_exists('gsb_twelve_twenty')) {
    module_enable(array('gsb_twelve_twenty'));
  }
}

/**
 * Delete field_is_application_open and field_waitlist_only field instances from Program Instance CT
 */
function gsb_public_update_7378() {
  $field_names = array(
    'field_is_application_open',
    'field_waitlist_only',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program_instance');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Enable GSB Dvent module
 */
function gsb_public_update_7379() {
  if (!module_exists('gsb_dvent')) {
    module_enable(array('gsb_dvent'));
  }
}

/**
 * Update the user permissions for Insights Quote FPP
 */
function gsb_public_update_7380() {

  $alumni_13071_user = user_role_load_by_name('Alumni:13071');
  $alumni_13071_permissions = array(
    'administer panelizer',
  );

  // Grant permissions to 'Alumni:13071' role
  user_role_grant_permissions($alumni_13071_user->rid, $alumni_13071_permissions);
}

/**
 * Enable modules: google_appliance_suggest and tb_megamenu
 */
function gsb_public_update_7381() {
  if (!module_exists('google_appliance_suggest')) {
    module_enable(array('google_appliance_suggest'));
  }
  if (!module_exists('tb_megamenu')) {
    module_enable(array('tb_megamenu'));
  }
}

/**
  * Update existing MSx fellows nodes
  */
 function gsb_public_update_7382() {
   $query = db_select('node', 'n');
   $query->fields('n', array('type', 'nid'));
   $query->condition('n.type', 'msx_fellows');
   $results = $query->execute();
   $nids = array();
   foreach($results as $ppp) {
     $nids[] = $ppp->nid;
   }
   $nodes = node_load_multiple($nids);
   foreach($nodes as $node) {
     $node->field_instance_text = array(
       'value' => substr($node->field_year['und'][0]['value'],0,4)
     );
     $node->status =1;
     node_save($node);
   }
} 

/**
 * Enable facebook metatags module
 */
function gsb_public_update_7383() {
  if (!module_exists('metatag_facebook')) {
    module_enable(array('metatag_facebook'));
  }
} 

/**
 * Enable facebook metatags for content types
 */
function gsb_public_update_7384() {

  $fbpage_value = '208357009185713'; 
  $configs = ctools_export_crud_load_all('metatag_config');

  $configs['node:school_story']->config['fb:pages']['value'] = $fbpage_value;
  metatag_config_save($configs['node:school_story']);

  $configs['node:announcement']->config['fb:pages']['value'] = $fbpage_value;
  metatag_config_save($configs['node:announcement']);

  $configs['node:idea_story']->config['fb:pages']['value'] = $fbpage_value;
  metatag_config_save($configs['node:idea_story']);
  
  $configs['node:page']->config['fb:pages']['value'] = $fbpage_value;
  metatag_config_save($configs['node:page']);
  
} 

/**
 * Enable GSB Feature Exec-ed Program Display module
 */
function gsb_public_update_7385() {
  if (!module_exists('gsb_feature_ee_program_display')) {
    module_enable(array('gsb_feature_ee_program_display'));
  }
}

/**
 * Change name of Offsite School Story to be Media Mention
 */
function gsb_public_update_7386() {
  $type = node_type_load('offsite_school_story');
  $type->name = "Media Mention";
  node_type_save($type);
}

/**
 * Un publish mba-class-1964, mba-class-1965 and mba-class-1966 reunion pages
 */
function gsb_public_update_7387() {
  $nids = array(381141,381146,382406);
  $nodes = node_load_multiple($nids);
  foreach($nodes as $node) {
     $node->status = 0;
     node_save($node);
  }
}

/**
 * Delete field_related_faculty field instances from Media Mention (aka offsite_school_story) CT
 */
function gsb_public_update_7388() {
  $field_names = array(
    'field_related_faculty',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'offsite_school_story');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Enable GSB Feature Seed Research Library CT module
 */
function gsb_public_update_7389() {
  if (!module_exists('gsb_feature_seed_research_library_ct')) {
    module_enable(array('gsb_feature_seed_research_library_ct'));
  }
}

/**
 * Enable GSB Feature Seed Research Library Display module
 */
function gsb_public_update_7390() {
  if (!module_exists('gsb_feature_seed_research_library_display')) {
    module_enable(array('gsb_feature_seed_research_library_display'));
  }
}

/**
 * Update adminstrator user permissions for
 */
function gsb_public_update_7391() {
  // Get the admin user role
  $adminstrator_user = user_role_load_by_name('administrator');
  // Add the permission
  $adminstrator_user_permissions = array(
    'administer panelizer node seed_research_project content',
  );
  // Update admin user role permissions
  user_role_grant_permissions($adminstrator_user->rid, $adminstrator_user_permissions);
}

/**
 * Delete {system} records for long-lost modules.
 */
function gsb_public_update_7392() {
  $modules = array(
    'addthis',
    'feeds',
    'feeds_jsonpath_parser',
    'feeds_tamper',
    'feeds_tamper_ui',
    'feeds_ui',
    'gsb_admin_enhancements',
    'gsb_feature_google_analytics_settings',
    'gsb_program_finder',
    'job_scheduler',
  );
  db_delete('system')
    ->condition('name', $modules, 'IN')
    ->condition('type', 'module')
    ->execute();
}

/**
 * Enable xmlsitemap module.
 */
function gsb_public_update_7393() {
  if (!module_exists('xmlsitemap')) {
    module_enable(array('xmlsitemap'));
  }
}

/**
 * Enable xmlsitemap sub-modules: xmlsitemap_engines, and xmlsitemap_node.
 */
function gsb_public_update_7394() {
  if (!module_exists('xmlsitemap_engines')) {
    module_enable(array('xmlsitemap_engines'));
  }
  if (!module_exists('xmlsitemap_node')) {
    module_enable(array('xmlsitemap_node'));
  }
}

/**
 * Enable GSB Box module
 */
function gsb_public_update_7395() {
  if (!module_exists('gsb_box')) {
    module_enable(array('gsb_box'));
  }
}

/**
 * Enable reCaptcha on webform.
 */
function gsb_public_update_7396() {
  $webform_ids = array(
      'webform_client_form_304266',
      'webform_client_form_337941',
      'webform_client_form_411526',
      'webform_client_form_411531',
      'webform_client_form_410146'
  );

  // Insert webform to captcha
  foreach ($webform_ids as $webform_id) {
    db_insert('captcha_points')
      ->fields(array('form_id' => $webform_id, 'module' => 'recaptcha', 'captcha_type' => 'reCAPTCHA'))
      ->execute();
  }
}

/**
 * Delete field_image_key_image field instances from Program CT
 */
function gsb_public_update_7397() {
  $field_names = array(
    'field_image_key_image',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'program');
    field_delete_instance($instance);
  }
  field_purge_batch(10);
}

/**
 * Remove field_part_of_business_magazine, field_part_of_rethink, field_season, field_rethink_date from School Story and Idea Story CT
 */
function gsb_public_update_7398() {
  _gsb_public_delete_fields(array('field_part_of_business_magazine', 'field_part_of_rethink', 'field_season','field_rethink_date' ));
}

/**
 * Delete field_year, field_volume_number, field_issue_number, field_region_of_interest field instances from Idea Story CT and field_region_of_interest from School Story CT
 */
function gsb_public_update_7399() {
  $field_names = array(
    'field_year',
    'field_volume_number',
    'field_issue_number',
    'field_region_of_interest'
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'idea_story');
    field_delete_instance($instance);
  }
  //deleting field_region_of_interest from school story CT
  $field_name = 'field_region_of_interest';
  $instance   = field_info_instance('node', $field_name, 'school_story');
  field_delete_instance($instance);

  field_purge_batch(10);
}

/**
 * Remove group_part_of_stanford_business,group_part_of_rethink field group from idea story
 */
function gsb_public_update_7400() {
  
  $delete_group_instance = array(
    'group_part_of_stanford_business',
    'group_part_of_rethink'    
  );
  foreach($delete_group_instance as $group_name) {
    if ($group = field_group_load_field_group($group_name, 'node', 'idea_story', 'form')) {
      ctools_include('export');
      field_group_group_export_delete($group, FALSE);
    }
  }
  
}

/**
 * Delete field_region_of_interest from announcement CT
 */
function gsb_public_update_7401() {
 
  $field_name = 'field_region_of_interest';
  $instance   = field_info_instance('node', $field_name, 'announcement');
  field_delete_instance($instance);

  field_purge_batch(10);
}

/**
 * Disable and uninstall gsb_feature_offsite_idea_story_ct.
 */
function gsb_public_update_7402() {
  module_disable(array('gsb_feature_offsite_idea_story_ct'));
  drupal_uninstall_modules(array('gsb_feature_offsite_idea_story_ct'));
  node_type_delete('offsite_idea_story');
}

/**
 * Delete duplicate nodes from courses ct.
 */
function gsb_public_update_7403() {
  // search for duplicate nodes
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_course_start_acad_year', 'fsa', 'n.nid = fsa.entity_id');
  $results = $query->fields('n',array('nid'))
                      ->condition('n.type', 'course')
                      ->condition('field_course_start_acad_year_value', '2016-12-31 16:00:00', 'LIKE')
                      ->execute();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }
  if (!empty($nids)) {
    // delete nodes
    node_delete_multiple($nids);
    watchdog('gsb_public', count($nids).' nodes has been deleted.');
  }
}

/**
 * Remove field field_is_application_open
 */
function gsb_public_update_7404() {
  _gsb_public_delete_fields(array('field_is_application_open'));
}

/**
 * Un publish msx-class-2016, msx-class-2015 and mba-class-1967 reunion pages
 */
function gsb_public_update_7405() {
  $nids = array(381151,417566,399061);
  $nodes = node_load_multiple($nids);
  foreach($nodes as $node) {
     $node->status = 0;
     node_save($node);
  }
}

/**
 * WP-8063 Remove field that requires addthis and then uninstall addthis
 */
function gsb_public_update_7406() {
    module_enable(array('addthis'));
    field_delete_field('field_addthis');
    module_disable(array('addthis'));
    drupal_uninstall_modules(array('addthis'));
}

/**
 * Create a field collection field and attach fields for phd_candidate ct
 */
function gsb_public_update_7407() {
  $t = get_t();

  $fields_array = array(
    array(
      'field' => array(
        'field_name' => 'field_job_market_paper',
        'label' => $t('Job Market Paper'),
        'cardinality' => -1,
        'type' => 'field_collection',
      ),
      'instance' => array(
        'field_name' => 'field_job_market_paper',
        'entity_type' => 'node',
        'bundle' => 'phd_candidate',
        'label' => $t('Job Market Paper'),
        'description' => '',
        'widget' => array('type' => 'field_collection_embed'),
        'required' => 0,
      ),
    ),
    array(
    'field' => array(
        'field_name' => 'field_link_single',
      ),
      'instance' => array(
        'field_name' => 'field_link_single',
        'entity_type' => 'field_collection_item',
        'bundle' => 'field_job_market_paper',
        'label' => 'Title',
        'cardinality' => 1,
        'description' => '',
        'widget' => array('type' => 'link'),
      )
    ),
    array(
    'field' => array(
        'field_name' => 'field_file_job_market_paper',
      ),
      'instance' => array(
        'field_name' => 'field_file_job_market_paper',
        'entity_type' => 'field_collection_item',
        'bundle' => 'field_job_market_paper',
        'label' => 'Paper',
        'cardinality' => 1,
        'description' => '',
        'widget' => array('type' => 'file'),
        'settings' => array(
            'file_extensions' => 'pdf',
            'file_directory' => 'phd-job-market-paper',
            'filefield_paths_enabled' => 0,
            ),
      )
    ),
    array(
    'field' => array(
        'field_name' => 'field_job_market_paper_desc',
      ),
      'instance' => array(
        'field_name' => 'field_job_market_paper_desc',
        'entity_type' => 'field_collection_item',
        'bundle' => 'field_job_market_paper',
        'label' => 'Description',
        'cardinality' => 1,
        'description' => '',
        'widget' => array('type' => 'text_textarea'),
      )
    ),
  );

  // Loop through fields array and create field and instance
  foreach ($fields_array as $field) {
    // Check if field already exists
    if (!field_info_field($field['field']['field_name'])) {
      field_create_field($field['field']);
    }

    // Check if instance exists
    if (!field_info_instance($field['instance']['entity_type'], $field['instance']['field_name'], $field['instance']['bundle'])) {
      field_create_instance($field['instance']);
    }
  }
}

/**
 * Migrate phd_candidate job market paper to field collection
 */
function gsb_public_update_7408() {

  $entity_type = 'node';
  // get all phd candidate nodes
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'phd_candidate');

  $entities = $query->execute();

  foreach($entities[$entity_type] as $entity) {
    $node = node_load($entity->nid);
    // wrapper
    $wrapper = entity_metadata_wrapper($entity_type, $entity->nid);

    // create field collection item
    $collection_item = entity_create('field_collection_item', array('field_name' => 'field_job_market_paper'));
    $collection_item->setHostEntity($entity_type, $node);

    $cwrapper = entity_metadata_wrapper('field_collection_item', $collection_item);

    // set all the field values to field collection items
    $cwrapper->field_link_single->set($wrapper->field_link_single->value());
    $cwrapper->field_file_job_market_paper->set($wrapper->field_file_job_market_paper->value());
    $cwrapper->field_job_market_paper_desc->set($wrapper->field_job_market_paper_desc->value());

    // save field collection wrapper
    $cwrapper->save();
  }
}

/**
 * Delete Old job market paper related fields from phd_candidate ct
 */
function gsb_public_update_7409() {
  $field_names = array(
    'field_link_single',
    'field_file_job_market_paper',
    'field_job_market_paper_desc',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'phd_candidate');
    field_delete_instance($instance);
  }

  field_purge_batch(10);
}

/**
 * Removing gsb_feature_offsite_idea_story_ct from system table
 */
function gsb_public_update_7410() {

  // https://www.drupal.org/node/2487215

  $modules = array(
    'gsb_feature_offsite_idea_story_ct',
  );

  db_delete('system')
    ->condition('name', $modules, 'IN')
    ->condition('type', 'module')
    ->execute();
}

/**
 * Delete empty field collection for phd_candidate job market paper
 */
function gsb_public_update_7411() {
  $entity_type = 'node';
  $field_collection_item_id = array();
  // get all phd candidate nodes
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'phd_candidate');

  $entities = $query->execute();

  foreach($entities[$entity_type] as $entity) {
    // wrapper
    $wrapper = entity_metadata_wrapper($entity_type, $entity->nid);

    foreach ($wrapper->field_job_market_paper as $field_collection_wrapper) {
      $field_collection = $field_collection_wrapper->value();
      // check if the fields within field collection are empty
      if (empty($field_collection->field_file_job_market_paper) && empty($field_collection->field_job_market_paper_desc) 
        && empty($field_collection->field_link_single)) {
          // collect all empty field collection to be deleted
          $field_collection_item_id[] = $field_collection->item_id;
      }
    }
  }
  // delete all empty field collection for phd candidate
  entity_delete_multiple('field_collection_item', $field_collection_item_id);
  watchdog('gsb_public', '!count empty field collection item removed .', array('!count' => count($field_collection_item_id)));
}

/**
 * Switch FPP re visioning to legacy
 */
function gsb_public_update_7412() {
  variable_set('fpp_revision_locking', 'legacy');
}

/**
 * Delete program instance from featured program fpp
 */
function gsb_public_update_7413() {
  // Remove program instance
  $instance = field_info_instance('fieldable_panels_pane', 'field_program_instance', 'featured_program');

  // Mark field instance for deletion.
  field_delete_instance($instance);
  field_purge_batch(10);

  // Remove the field
  field_delete_field('field_program_instance');
  field_purge_batch(10);
}

/**
 * Enable the Mission Statement Fpp Module
 */
function gsb_public_update_7414() {
  if (!module_exists('gsb_feature_mission_statement_fpp')) {
    module_enable(array('gsb_feature_mission_statement_fpp'));
  }
}

/**
 * Update school_story, announcement and idea_story body to using markdown plus iframe text format
 */
function gsb_public_update_7415() {
  $content_types = array ('announcement', 'school_story', 'idea_story');
  $num_updated = db_update('field_data_field_body')
    ->fields(array(
      'field_body_format' => 'markdown_plus_iframe',
    ))
    ->condition('bundle', $content_types, 'IN')
    ->execute();
}

/**
 * Update school_story, announcement for exclude story homepage field
 */
function gsb_public_update_7416() {
  $types = array('announcement', 'school_story');
  foreach ($types as $type) {
    $nodes = node_load_multiple(array(), array('type' => $type));
    foreach ($nodes as $node) {
      $node->field_exclude_story_homepage[LANGUAGE_NONE][0]['value'] = '0';
      field_attach_update('node', $node);
    }
  }
}

/**
 * Enable the Landing Viewport Fpp Module
 */
function gsb_public_update_7417() {
  if (!module_exists('gsb_feature_landing_viewport_fpp')) {
    module_enable(array('gsb_feature_landing_viewport_fpp'));
  }
}

/**
 * Enable the Voices, Breakpoints and Picture modules
 */
function gsb_public_update_7418() {
  if (!module_exists('gsb_feature_voices_ct')) {
    module_enable(array('gsb_feature_voices_ct'));
  }
  if (!module_exists('breakpoints')) {
    module_enable(array('breakpoints'));
  }
  if (!module_exists('picture')) {
    module_enable(array('picture'));
  }
}

/**
 * Enable the Voices Display module
 */
function gsb_public_update_7419() {
  if (!module_exists('gsb_feature_voices_display')) {
    module_enable(array('gsb_feature_voices_display'));
  }
}

function gsb_public_update_7420() {
  db_update('block')
    ->fields(array(
        'status' => 0,
        'region' => 'disabled',
      )
    )
    ->condition('delta', 'gpcb_stay_informed')
    ->execute();
}

/**
 * Create a field endowed title and attach fields for faculty ct
 */
function gsb_public_update_7421() {
  $t = get_t();

  $fields_array = array(
    array(
    'field' => array(
        'field_name' => 'field_endowed_title_appointment',
        'label' => $t('Endowed Title OR Appointment'),
        'cardinality' => 1,
        'type' => 'link_field',
      ),
      'instance' => array(
        'field_name' => 'field_endowed_title_appointment',
        'entity_type' => 'node',
        'bundle' => 'faculty',
        'label' => 'Endowed Title OR Appointment',
        'cardinality' => 1,
        'description' => '',
        'widget' => array('type' => 'link'),
      )
    ),
  );

  // Loop through fields array and create field and instance
  foreach ($fields_array as $field) {
    // Check if field already exists
    if (!field_info_field($field['field']['field_name'])) {
      field_create_field($field['field']);
    }

    // Check if instance exists
    if (!field_info_instance($field['instance']['entity_type'], $field['instance']['field_name'], $field['instance']['bundle'])) {
      field_create_instance($field['instance']);
    }
  }
}

/**
 * Migrate faculty endowed title data to link field
 */
function gsb_public_update_7422() {

  $entity_type = 'node';
  // get all faculty nodes
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'faculty');

  $entities = $query->execute();

  foreach($entities[$entity_type] as $entity) {
    // wrapper
    $wrapper = entity_metadata_wrapper($entity_type, $entity->nid);
    if (!empty($wrapper->field_title_appointment->value())) {
      $wrapper->field_endowed_title_appointment->title->set($wrapper->field_title_appointment->value());
      $wrapper->save();
    }
  }
}

/**
 * Delete endowed title appointment from faculty ct
 */
function gsb_public_update_7423() {
  // Remove endowed title appointment
  $instance = field_info_instance('node', 'field_title_appointment', 'faculty');

  // Mark field instance for deletion.
  field_delete_instance($instance);
  field_purge_batch(10);

  // Remove the field
  field_delete_field('field_title_appointment');
  field_purge_batch(10);
}

/**
 * Enable the Coveo Search module
 */
function gsb_public_update_7424() {
  if (!module_exists('gsb_coveo_search')) {
    module_enable(array('gsb_coveo_search'));
  }
}

/**
 * Disable gsb_feature_gsa_search.
 */
function gsb_public_update_7425() {
  module_disable(array('gsb_feature_gsa_search'));
}

/**
 * Enable phpwkhtmltopdf module.
 */
function gsb_public_update_7426() {
  if (!module_exists('phpwkhtmltopdf')) {
    module_enable(array('phpwkhtmltopdf'));
  }
}

/**
 * Set simplesaml pattern for private files.
 */
function gsb_public_update_7427() {
  variable_set('simplesaml_auth_private_files_base_path', '*');
}

/**
 * WP-8438 Delete field instance from Voices CT
 */
function gsb_public_update_7428() {
  $field_names = array(
    'field_slideshow_style',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'voices');
    field_delete_instance($instance);
  }
  field_purge_batch(1);
}

/**
 * WP-8444 Delete field instance field_related_other_label from Voices CT
 */
function gsb_public_update_7429() {
  $field_names = array(
    'field_related_other_label',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'voices');
    field_delete_instance($instance);
  }
  field_purge_batch(1);
} 

/**
 * WP-8354 Prevent search engines from indexing pages
 */
function gsb_public_update_7430() {
  $config = new stdClass();
  $config->disabled = FALSE; /* Edit this to true to make a default config disabled initially */
  $config->api_version = 1;
  $config->instance = 'node:alumni_reunion_agenda_item';
  $config->config = [
    'robots' => [
      'value' => [
        'noindex' => 'noindex',
        'noarchive' => 'noarchive',
        'index' => 0,
        'follow' => 0,
        'nofollow' => 0,
        'nosnippet' => 0,
        'noodp' => 0,
        'noydir' => 0,
        'noimageindex' => 0,
        'notranslate' => 0,
      ],
    ],
  ];
  $config = (object) $config;
  metatag_config_save($config);
}

/**
 * Removing field_region_of_interest field instance from publication ct
 */
function gsb_public_update_7431() {
  $field_names = array(
    'field_region_of_interest',
  );
  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'publication');
    field_delete_instance($instance);
  }
  field_purge_batch(1);
} 

/**
 * Enable md_megamenu module.
 */
function gsb_public_update_7432() {
  if (!module_exists('md_megamenu')) {
    module_enable(array('md_megamenu'));
  }
}

/**
 * Enable menu_import module.
 */
function gsb_public_update_7433() {
  if (!module_exists('menu_import')) {
    module_enable(array('menu_import'));
  }
}

/**
 * WP-8694 Disable mini_panels and remove these unused menus
 */
function gsb_public_update_7434() {
  foreach (panels_mini_load_all() as $mini_panel) {
    print panels_mini_delete($mini_panel);
  }
  module_disable(array('gsb_feature_ee_megamenu'));
  module_disable(array('gsb_panels_pages'));
}

/**
 * WP-8792 Expand section menu links
 */
function gsb_public_update_7435() {
  $time_pre = microtime(true);
  $section_menus = array(
    'section-12261', // Experience
    'section-13071', // Alumni
    'section-26671', // Companies
    'section-12461', // Contact Us
    'section-13046', // Faculty & Research
    'section-27251', // Insights
    'section-12946', // Jobs
    'section-13051', // Library
    'section-12401', // MBA
    'section-12406', // MSx
    'section-28606', // NonGSBReg
    'section-12456', // Newsroom
    'section-12481', // PhD
    'section-13146', // Research Fellows
    'section-35056', // Seed
    'section-12421', // Community
    'section-12416', // Visit
    'section-33656', // Catalog
  );

  $menu_count = 0;
  foreach($section_menus as $section) {
    $menus = menu_load($section);
    $menu_links = menu_load_links($section);
    print("\n Checking:".$menus['title']."\n");
    foreach($menu_links as $menu_item) {
      if($menu_item['has_children'] == 1) {
        if($menu_item['expanded'] != 1) {
          $menu_count = $menu_count + 1;
          $menu_item['expanded'] = 1;
          print "\t[Expanding]: "
            . $menu_item['link_title']
            . " - "
            . drupal_get_path_alias($menu_item['link_path'])
            . "\n";
          menu_link_save($menu_item);
        }
      }
    }
  }
  print "Expanded ".$menu_count." menus";
  $time_post = microtime(true);
  $exec_time = $time_post - $time_pre;
  echo $exec_time;
}